{"version":1698883200000,"changes":[{"timestamp":1702266210708,"collection":"customLists","objectPk":1701942759626,"operation":"update","object":{"name":"Webpack CSS 顺序问题 web-infra-dev","id":1701942759626,"searchableName":null,"type":"page-link","isNestable":true,"isDeletable":true,"createdAt":"2023-12-07T09:52:39.626Z"}},{"timestamp":1702266210718,"collection":"customLists","objectPk":1701942759626,"operation":"update","object":{"name":"Webpack CSS 顺序问题 web-infra-dev","id":1701942759626,"searchableName":null,"type":"page-link","isNestable":true,"isDeletable":true,"createdAt":"2023-12-07T09:52:39.626Z"}},{"timestamp":1702266210741,"collection":"pages","objectPk":"nextui.org/docs/customization/theme","operation":"update","object":{"url":"nextui.org/docs/customization/theme","fullUrl":"https://nextui.org/docs/customization/theme","domain":"nextui.org","hostname":"nextui.org","fullTitle":"Theme | NextUI - Beautiful, fast and modern React UI Library","text":" v2.2.9 Docs Components Blog Figma Introducing v2.2.0 open navigation menu Quick Search... K Sponsor open navigation menu Guide Introduction Installation Design Principles Routing New Upgrade to v2 Frameworks Next.js Vite Remix Astro Customization Theme Layout Colors Customize theme Create theme Dark mode Override styles Custom variants Components Avatar Accordion Autocomplete New Badge Button Breadcrumbs New Card Checkbox Checkbox Group Chip Circular Progress Code Divider Dropdown Updated Image Input Kbd Link Updated Listbox Updated Modal Navbar Pagination Popover Progress Radio Group Select Skeleton Snippet Scroll Shadow Spacer Spinner Switch Slider New Table Tabs Updated Textarea Updated Tooltip User Theme Theming is a key element in designing user interfaces (UIs). It enables the application of a consistent aesthetic across your application, enhancing the user experience and maintaining visual uniformity. In NextUI, we facilitate easy and flexible theme customization using a TailwindCSS plugin. This plugin, which is based on the tw-colors plugin developed by L-Blondy , allows you to customize color schemes, layout configurations, and more, across different components of your application. What is a Theme? A theme, in the context of NextUI, is a predefined set of colors, layout attributes, and other UI elements that you can consistently apply across your application. Themes ensure visual consistency, enrich the user experience, and simplify the management and updates of your app's look and feel. Setup The first step to using NextUI's theming capability is adding the nextui plugin to your tailwind.config.js file. Below is an example of how to do this: // tailwind.config.js const { nextui } = require ( \"@nextui-org/react\" ) ; /** @type {import('tailwindcss').Config} */ module . exports = { content : [ // ... \"./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}\" , ] , theme : { extend : { } , } , darkMode : \"class\" , plugins : [ nextui ( ) ] , } ; Usage After adding the plugin to your tailwind.config.js file, you can utilize any of the default themes (light/dark) or a custom one. Here's how you can apply these themes in your main.jsx or main.tsx: Go to the src directory and inside main.jsx or main.tsx, apply the following class names to the root element: light for the light theme. dark for the dark theme. text-foreground to set the text color. bg-background to set the background color. // main.tsx or main.jsx import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; import { NextUIProvider } from \"@nextui-org/react\" ; import App from \"./App\" ; import \"./index.css\" ; ReactDOM . createRoot ( document . getElementById ( \"root\" ) ) . render ( < React.StrictMode > < NextUIProvider > < main className = \" dark text-foreground bg-background \" > < App /> </ main > </ NextUIProvider > </ React.StrictMode > , ) ; Note: See the Colors section to learn more about the color classes. Default Plugin Options The nextui plugin provides a default structure. It is outlined as follows: module . exports = { plugins : [ nextui ( { prefix : \"nextui\" , // prefix for themes variables addCommonColors : false , // override common colors (e.g. \"blue\", \"green\", \"pink\"). defaultTheme : \"light\" , // default theme from the themes object defaultExtendTheme : \"light\" , // default theme to extend on custom themes layout : { } , // common layout tokens (applied to all themes) themes : { light : { layout : { } , // light theme layout tokens colors : { } , // light theme colors } , dark : { layout : { } , // dark theme layout tokens colors : { } , // dark theme colors } , // ... custom themes } , } ) , ] , } ; Themes Options These are the options that you can use to apply custom configurations to your themes. module . exports = { plugins : [ nextui ( { themes : { light : { layout : { } , colors : { } } , dark : { layout : { } , colors : { } } , ... // custom themes } } ) ] } Nested themes NextUI supports nested themes, allowing you to apply different themes to different sections of your application: < html class = \" dark \" > ... < div class = \" light \" > ... </ div > < div class = \" purple-dark \" > ... </ div > </ html > Theme based variants NextUI enables you to apply TailwindCSS styles based on the currently active theme. Below are examples of how to do this: <!-- In dark theme, background will be dark and text will be light. In light theme, background will be light and text will be dark --> < div class = \" dark dark:bg-gray-800 dark:text-white bg-white text-black \" > ... < div > Text color changes based on theme </ div > </ div > < div class = \" light light:bg-gray-100 light:text-black bg-black text-white \" > ... < div > Text color changes based on theme </ div > </ div > API Reference The following table provides an overview of the various attributes you can use when working with themes in NextUI: AttributeTypeDescriptionDefault prefix string The prefix for the css variables. nextui addCommonColors boolean If true, the common nextui colors (e.g. \"blue\", \"green\", \"purple\") will replace the TailwindCSS default colors. false defaultTheme light | dark The default theme to use. light defaultExtendTheme light | dark The default theme to extend. light layout LayoutTheme The layout definitions. - themes ConfigThemes The theme definitions. - Types ConfigThemes type ConfigTheme = { extend ? : \"light\" | \"dark\" ; // base theme to extend layout ? : LayoutTheme ; // see LayoutTheme colors ? : ThemeColors ; // see ThemeColors } ; type ConfigThemes = Record < string , ConfigTheme > ; LayoutTheme type BaseThemeUnit = { small ? : string ; medium ? : string ; large ? : string ; } ; type FontThemeUnit = { small ? : string ; medium ? : string ; large ? : string ; tiny ? : string ; } ; interface LayoutTheme { /** * Base unit token that defines a consistent spacing scale across * the components. */ spacingUnit ? : number ; /** * The default font size applied across the components. */ fontSize ? : FontThemeUnit ; /** * The default line height applied across the components. */ lineHeight ? : FontThemeUnit ; /** * The default radius applied across the components. * we recommend to use `rem` units. */ radius ? : BaseThemeUnit ; /** * A number between 0 and 1 that is applied as opacity-[value] when * the component is disabled. */ disabledOpacity ? : string | number ; /** * The default height applied to the divider component. * we recommend to use `px` units. */ dividerWeight ? : string ; /** * The border width applied across the components. */ borderWidth ? : BaseThemeUnit ; /** * The box shadow applied across the components. */ boxShadow ? : BaseThemeUnit ; } ThemeColors type ColorScale = { 50 : string ; 100 : string ; 200 : string ; 300 : string ; 400 : string ; 500 : string ; 600 : string ; 700 : string ; 800 : string ; 900 : string ; foreground : string ; // contrast color DEFAULT : string ; } ; type BaseColors = { background : ColorScale ; // the page background color foreground : ColorScale ; // the page text color divider : ColorScale ; // used for divider and single line border overlay : ColorScale ; // used for modal, popover, etc. focus : ColorScale ; // used for focus state outline content1 : ColorScale ; // used for card, modal, popover, etc. content2 : ColorScale ; content3 : ColorScale ; content4 : ColorScale ; } ; // brand colors type ThemeColors = BaseColors & { default : ColorScale ; primary : ColorScale ; secondary : ColorScale ; success : ColorScale ; warning : ColorScale ; danger : ColorScale ; } ; Frameworks: Astro Layout Edit this page on GitHub On this page What is a Theme? Setup Usage Default Plugin Options Themes Options Nested themes Theme based variants API Reference Types ConfigThemes LayoutTheme ThemeColors Back to top © 2023 NextUI Inc. Deployed on ","lang":null,"canonicalUrl":"https://nextui.org/docs/customization/theme","description":null,"urlTerms":["docs","customization","theme"],"titleTerms":["theme","nextui","beautiful","fast","and","modern","react","ui","library"]}},{"timestamp":1702266212638,"collection":"favIcons","objectPk":"nextui.org","operation":"update","object":{"hostname":"nextui.org","favIcon":""}},{"timestamp":1702266214688,"collection":"pages","objectPk":"nextui.org/docs/customization/theme","operation":"update","object":{"url":"nextui.org/docs/customization/theme","fullUrl":"https://nextui.org/docs/customization/theme","domain":"nextui.org","hostname":"nextui.org","fullTitle":"Theme | NextUI - Beautiful, fast and modern React UI Library","text":" v2.2.9 Docs Components Blog Figma Introducing v2.2.0 open navigation menu Quick Search... K Sponsor open navigation menu Guide Introduction Installation Design Principles Routing New Upgrade to v2 Frameworks Next.js Vite Remix Astro Customization Theme Layout Colors Customize theme Create theme Dark mode Override styles Custom variants Components Avatar Accordion Autocomplete New Badge Button Breadcrumbs New Card Checkbox Checkbox Group Chip Circular Progress Code Divider Dropdown Updated Image Input Kbd Link Updated Listbox Updated Modal Navbar Pagination Popover Progress Radio Group Select Skeleton Snippet Scroll Shadow Spacer Spinner Switch Slider New Table Tabs Updated Textarea Updated Tooltip User Theme Theming is a key element in designing user interfaces (UIs). It enables the application of a consistent aesthetic across your application, enhancing the user experience and maintaining visual uniformity. In NextUI, we facilitate easy and flexible theme customization using a TailwindCSS plugin. This plugin, which is based on the tw-colors plugin developed by L-Blondy , allows you to customize color schemes, layout configurations, and more, across different components of your application. What is a Theme? A theme, in the context of NextUI, is a predefined set of colors, layout attributes, and other UI elements that you can consistently apply across your application. Themes ensure visual consistency, enrich the user experience, and simplify the management and updates of your app's look and feel. Setup The first step to using NextUI's theming capability is adding the nextui plugin to your tailwind.config.js file. Below is an example of how to do this: // tailwind.config.js const { nextui } = require ( \"@nextui-org/react\" ) ; /** @type {import('tailwindcss').Config} */ module . exports = { content : [ // ... \"./node_modules/@nextui-org/theme/dist/**/*.{js,ts,jsx,tsx}\" , ] , theme : { extend : { } , } , darkMode : \"class\" , plugins : [ nextui ( ) ] , } ; Usage After adding the plugin to your tailwind.config.js file, you can utilize any of the default themes (light/dark) or a custom one. Here's how you can apply these themes in your main.jsx or main.tsx: Go to the src directory and inside main.jsx or main.tsx, apply the following class names to the root element: light for the light theme. dark for the dark theme. text-foreground to set the text color. bg-background to set the background color. // main.tsx or main.jsx import React from \"react\" ; import ReactDOM from \"react-dom/client\" ; import { NextUIProvider } from \"@nextui-org/react\" ; import App from \"./App\" ; import \"./index.css\" ; ReactDOM . createRoot ( document . getElementById ( \"root\" ) ) . render ( < React.StrictMode > < NextUIProvider > < main className = \" dark text-foreground bg-background \" > < App /> </ main > </ NextUIProvider > </ React.StrictMode > , ) ; Note: See the Colors section to learn more about the color classes. Default Plugin Options The nextui plugin provides a default structure. It is outlined as follows: module . exports = { plugins : [ nextui ( { prefix : \"nextui\" , // prefix for themes variables addCommonColors : false , // override common colors (e.g. \"blue\", \"green\", \"pink\"). defaultTheme : \"light\" , // default theme from the themes object defaultExtendTheme : \"light\" , // default theme to extend on custom themes layout : { } , // common layout tokens (applied to all themes) themes : { light : { layout : { } , // light theme layout tokens colors : { } , // light theme colors } , dark : { layout : { } , // dark theme layout tokens colors : { } , // dark theme colors } , // ... custom themes } , } ) , ] , } ; Themes Options These are the options that you can use to apply custom configurations to your themes. module . exports = { plugins : [ nextui ( { themes : { light : { layout : { } , colors : { } } , dark : { layout : { } , colors : { } } , ... // custom themes } } ) ] } Nested themes NextUI supports nested themes, allowing you to apply different themes to different sections of your application: < html class = \" dark \" > ... < div class = \" light \" > ... </ div > < div class = \" purple-dark \" > ... </ div > </ html > Theme based variants NextUI enables you to apply TailwindCSS styles based on the currently active theme. Below are examples of how to do this: <!-- In dark theme, background will be dark and text will be light. In light theme, background will be light and text will be dark --> < div class = \" dark dark:bg-gray-800 dark:text-white bg-white text-black \" > ... < div > Text color changes based on theme </ div > </ div > < div class = \" light light:bg-gray-100 light:text-black bg-black text-white \" > ... < div > Text color changes based on theme </ div > </ div > API Reference The following table provides an overview of the various attributes you can use when working with themes in NextUI: AttributeTypeDescriptionDefault prefix string The prefix for the css variables. nextui addCommonColors boolean If true, the common nextui colors (e.g. \"blue\", \"green\", \"purple\") will replace the TailwindCSS default colors. false defaultTheme light | dark The default theme to use. light defaultExtendTheme light | dark The default theme to extend. light layout LayoutTheme The layout definitions. - themes ConfigThemes The theme definitions. - Types ConfigThemes type ConfigTheme = { extend ? : \"light\" | \"dark\" ; // base theme to extend layout ? : LayoutTheme ; // see LayoutTheme colors ? : ThemeColors ; // see ThemeColors } ; type ConfigThemes = Record < string , ConfigTheme > ; LayoutTheme type BaseThemeUnit = { small ? : string ; medium ? : string ; large ? : string ; } ; type FontThemeUnit = { small ? : string ; medium ? : string ; large ? : string ; tiny ? : string ; } ; interface LayoutTheme { /** * Base unit token that defines a consistent spacing scale across * the components. */ spacingUnit ? : number ; /** * The default font size applied across the components. */ fontSize ? : FontThemeUnit ; /** * The default line height applied across the components. */ lineHeight ? : FontThemeUnit ; /** * The default radius applied across the components. * we recommend to use `rem` units. */ radius ? : BaseThemeUnit ; /** * A number between 0 and 1 that is applied as opacity-[value] when * the component is disabled. */ disabledOpacity ? : string | number ; /** * The default height applied to the divider component. * we recommend to use `px` units. */ dividerWeight ? : string ; /** * The border width applied across the components. */ borderWidth ? : BaseThemeUnit ; /** * The box shadow applied across the components. */ boxShadow ? : BaseThemeUnit ; } ThemeColors type ColorScale = { 50 : string ; 100 : string ; 200 : string ; 300 : string ; 400 : string ; 500 : string ; 600 : string ; 700 : string ; 800 : string ; 900 : string ; foreground : string ; // contrast color DEFAULT : string ; } ; type BaseColors = { background : ColorScale ; // the page background color foreground : ColorScale ; // the page text color divider : ColorScale ; // used for divider and single line border overlay : ColorScale ; // used for modal, popover, etc. focus : ColorScale ; // used for focus state outline content1 : ColorScale ; // used for card, modal, popover, etc. content2 : ColorScale ; content3 : ColorScale ; content4 : ColorScale ; } ; // brand colors type ThemeColors = BaseColors & { default : ColorScale ; primary : ColorScale ; secondary : ColorScale ; success : ColorScale ; warning : ColorScale ; danger : ColorScale ; } ; Frameworks: Astro Layout Edit this page on GitHub On this page What is a Theme? Setup Usage Default Plugin Options Themes Options Nested themes Theme based variants API Reference Types ConfigThemes LayoutTheme ThemeColors Back to top © 2023 NextUI Inc. Deployed on ","lang":null,"canonicalUrl":"https://nextui.org/docs/customization/theme","description":null,"urlTerms":["docs","customization","theme"],"titleTerms":["theme","nextui","beautiful","fast","and","modern","react","ui","library"]}},{"timestamp":1702266214705,"collection":"pageListEntries","objectPk":[20201014,"nextui.org/docs/customization/theme"],"operation":"update","object":{"listId":20201014,"pageUrl":"nextui.org/docs/customization/theme","fullUrl":"https://nextui.org/docs/customization/theme","createdAt":"2023-12-07T10:03:36.688Z"}},{"timestamp":1702266214743,"collection":"visits","objectPk":[1701943416794,"nextui.org/docs/customization/theme"],"operation":"update","object":{"url":"nextui.org/docs/customization/theme","time":1701943416794,"duration":null,"scrollMaxPx":null,"scrollMaxPerc":null,"scrollPerc":null,"scrollPx":null}},{"timestamp":1702266214763,"collection":"visits","objectPk":[1701943416814,"nextui.org/docs/customization/theme"],"operation":"update","object":{"url":"nextui.org/docs/customization/theme","time":1701943416814,"duration":null,"scrollMaxPx":null,"scrollMaxPerc":null,"scrollPerc":null,"scrollPx":null}},{"timestamp":1702266214773,"collection":"bookmarks","objectPk":"nextui.org/docs/customization/theme","operation":"update","object":{"url":"nextui.org/docs/customization/theme","time":1701943416830}},{"timestamp":1702266214785,"collection":"pageListEntries","objectPk":[1701764990272,"nextui.org/docs/customization/theme"],"operation":"update","object":{"listId":1701764990272,"pageUrl":"nextui.org/docs/customization/theme","fullUrl":"https://nextui.org/docs/customization/theme","createdAt":"2023-12-07T10:03:49.000Z"}},{"timestamp":1702266214832,"collection":"customLists","objectPk":1701943432733,"operation":"update","object":{"name":"UI库","id":1701943432733,"searchableName":"UI库","type":null,"isNestable":true,"isDeletable":true,"createdAt":"2023-12-07T10:03:52.801Z","nameTerms":["ui库"]}},{"timestamp":1702266214841,"collection":"sharedListMetadata","objectPk":1701943432733,"operation":"update","object":{"localId":1701943432733,"remoteId":"NPJuAddQTrBe8uaV9CKB","private":true}},{"timestamp":1702266215563,"collection":"pageListEntries","objectPk":[1701943432733,"nextui.org/docs/customization/theme"],"operation":"update","object":{"listId":1701943432733,"pageUrl":"nextui.org/docs/customization/theme","fullUrl":"https://nextui.org/docs/customization/theme","createdAt":"2023-12-07T10:03:52.871Z"}},{"timestamp":1702266215594,"collection":"customLists","objectPk":1701943432733,"operation":"update","object":{"name":"UI库","id":1701943432733,"searchableName":"UI库","type":null,"isNestable":true,"isDeletable":true,"createdAt":"2023-12-07T10:03:52.801Z","nameTerms":["ui库"]}},{"timestamp":1702266215600,"collection":"customLists","objectPk":1701943462056,"operation":"update","object":{"name":"React","id":1701943462056,"searchableName":"React","type":null,"isNestable":true,"isDeletable":true,"createdAt":"2023-12-07T10:04:22.099Z","nameTerms":["react"]}},{"timestamp":1702266215610,"collection":"sharedListMetadata","objectPk":1701943462056,"operation":"update","object":{"localId":1701943462056,"remoteId":"Y4AuwFg5w9u1sUaKdKxE","private":true}},{"timestamp":1702266215616,"collection":"pageListEntries","objectPk":[1701943462056,"nextui.org/docs/customization/theme"],"operation":"update","object":{"listId":1701943462056,"pageUrl":"nextui.org/docs/customization/theme","fullUrl":"https://nextui.org/docs/customization/theme","createdAt":"2023-12-07T10:04:22.182Z"}},{"timestamp":1702266215642,"collection":"pages","objectPk":"6hu.cc/archives/87296.html","operation":"update","object":{"url":"6hu.cc/archives/87296.html","fullUrl":"https://www.6hu.cc/archives/87296.html","domain":"6hu.cc","hostname":"6hu.cc","fullTitle":"组件库技术选型和开发环境搭建-六虎","text":" Android iOS 人工智能 代码人生 前端 后端 开发工具 登录 组件库技术选型和开发环境搭建 2023-08-10 前端 1.1K 本文为稀土技能社区首发签约文章 14天内制止转载 14天后未获授权制止转载 侵权必究 专栏上篇文章传送门 根据Vite打造事务组件库 开篇介绍 专栏下篇文章传送门 实战案例 初探工程装备 & 图标组件热身 本节触及的内容源码可在vue-pro-components c1 分支找到 欢迎 star 支撑 前言 本文是 根据Vite+AntDesignVue打造事务组件库 专栏第 2 篇文章【组件库技能选型和开发环境树立】 为了让读者们沉溺式体会组件库开发 我将会手把手带着读者们树立起一个组件库的 monorepo 开发环境 相关源码可在 vue-pro-components 库房中获得。 为什么挑选 monorepo monorepo 这个词大家或多或少都听过 乃至现已在项目中应用过 问题来了 你能给 monorepo 下个界说吗 别慌 我也不会 咱们来看看维基百科给出的界说。 Inversion control systems, amonorepo(“mono” meaning ‘single’ and “repo” being short for ‘repository’) is a software development strategy where code for many projects is stored in the same repository. 可见 monorepo 的含义便是在一个单体库房中办理多个项目 这种项目办理形式在一些大型项目中现已被广泛应用 比方 Vite, Vue, React, Angular, React Native, Jest, Pinia, Vue CLI, Element Plus, Modern.js, Next.js 等。假如你打开这些项目库房 你能够发现其间一个很明显的共性 它们都选用了 packages目录来办理子包 每个子包中都包含一个 package.json文件 也便是说子包也是一个独立的 npm包。 进一步研究这些库房时 咱们能够发现 这些项目在支撑起整个 monorepo 体系时选用的技能计划是不相同的。 有的项目简略选用了 yarn workspaces 有的则运用了 Lerna 也有的用了 pnpm 还有的用了 Changesets 再卷一点的现已用上了 Turborepo。 Changesets 和 Turborepo 不能界说为 monorepo 计划 而是 monorepo 体系中强有力的配套东西。 鉴于笔者还未全面运用过以上一切计划 关于这些计划中的优缺点 无法给出客观的点评 读者们能够自行去查阅更多资料。 这儿简略给个参阅定见 帮助不了解这块的读者先有个大略的知道 如有错误 还请评论指出 yarn + workspaces yarn 内置的 workspaces 特性能够让子包之间的引证变得简略 其间也用到了 symbol link 在此根底上能够衍生出更多上层的才能 Lerna 便是在此根底上发展而来的东西。workspaces 支撑了 monorepo 最根底的才能 可是仅靠它也显得有点单薄 因为它没有供给包的全生命周期办理才能。 Yarn workspaces aim to make working withmonoreposeasy, solving one of the main use cases for yarn linkin a more declarative way. In short, they allow multiple projects to live together in the same repository AND to cross-reference each other any modification to one’s source code being instantly applied to the others. Lerna Lerna 能够处理上面说的问题 它供给了包的全生命周期办理才能 包含但不限于 新建子包 / 删去子包 / 办理子包依靠 / 发包 等等 并且有相关的指令行支撑 能较大程度上提高 monorepo 项目开发和维护功率。除此之外 Lerna 团队还极力提高性能和开发体会 详细见 Why Lerna? pnpm pnpm 从设计上就天然支撑了 monorepo 一起还经过 严格的依靠结构 / symbol link / hard link 等才能处理了 鬼魂依靠、依靠占用大量存储空间 等问题。pnpm 也能够搭配 Lerna 运用。 Changesets Changesets 是 pnpm 推荐的一个致力于处理改变记录集、changelog、version 等问题的东西 听说比 Lerna Version 这块的处理更科学。它有一个生产和消费 .changeset的进程 用户在一些复杂版别操控场景中有必定的自主操控权 因为你能够对 changeset 等内容做必定调整 自由度更高。 Turborepo Turbo 涡轮增压嘛 这便是要起飞的节奏 Turborepo 内部的中心代码是根据 Go 来完成的 这跟 esbuild 相同 直接是降维打击啊 简略看了一些 Turborepo 官网的文档 能够发现 Turborepo是专注于提高构建性能的东西和渠道 它在 Pipeline 编列、Output Caching、Remote Caching、Output Replaying 等方面做了许多尽力 相同的事情不做第二次 这与 Lerna 现在的办理团队 Nrwl 研发的构建渠道 Nx 的发力方向有点类似。 合理的 Pipeline 编列能够最大限度发挥 CPU 性能。缓存用好了真的是一把利刃 关于重复的工作 得到秒级乃至毫秒级的响应是真的香 这在 monorepo 项目中尤其重要 因为你不知道一个 monorepo 可能会演变成多大的工程 而且 Remote Caching 在 CI/CD 中也能发挥很大作用 为什么这些明星项目都不谋而合挑选了 monorepo 呢 背后的原因可能有这些 现代前端工程的复杂度在不断提高 使得拆包成为了必然趋势。 可是把一个大型项目拆成多个库房又让办理和联调变得十分困难 npm link之类的计划开发体会太差。 现在最佳的计划仍是在一个库房维护 然后经过技能手段改善单体库房的下风 既能保持子包之间的独立性 又能让包之间联调变得简略。 使得集成化的 CI/CD 变得更加速捷。 更多亮点值得探究…… 技能选型 在组件库的技能选型这块没有太多可说的 根本上是环绕项目的需求和自身的才能打开 依照开发进程中的实践需求引进相关的技能计划。这中间会存在片面意愿 仅供参阅 Monorepo: 我仍是挑选了保守一点的 Lerna 这个我相对熟悉一点 一起也是想多踩踩坑 知道坑在哪里 才能明白为什么要换更好的东西。 前端结构 如专栏标题所述 我挑选了个人更熟悉的 Vue3 生态。 类型支撑: TypeScript。 根底 UI 组件库 AntDesignVue 承继了 AntDesign 的企业级设计风格 个人感觉 AntDesignVue 相对其他 Vue 生态的组件库更有质感 可是它也不是完美的。 构建东西 Vite, Rollup, Gulp 以及相关插件生态。组件库建设是一个相对复杂的工程 很难依靠一种东西把一切事宜处理完毕 所以整合东西链是必要的。 CSS预处理器 Less。挑选 Less 主要是考虑后续切换主题 这块 Less 比较好处理 纯属个人片面定见 究竟还有不依靠 preprocessor 的 。 发布流程东西 release-it。 CI/CD: Github Actions。这个没有强制要求 有许多挑选。 标准/束缚之类的 ESLint, Prettier, StyleLint, husky, commitizen 等等。 更多…… 开发环境树立 说太多概念也不太容易消化 咱们来实操一下。 创立 Lerna 工程 首先咱们需求新建并进入 vue-pro-components工程目录 接着经过 npx lerna init创立一个工程。 $ mkdir vue-pro-components && cd vue-pro-components $ npx lerna init lerna notice cli v4.0.0 lerna info Initializing Git repository lerna info Creating package.json lerna info Creating lerna.json lerna info Creating packages directory lerna success Initialized Lerna files 能够发现 Lerna 为咱们生成了一个 monorepo 项目的根本骨架 $ tree . |-- lerna.json |-- package.json ` -- packages package.json 大略看一下 package.json中的 private字段设置为了 true。 { \"name\" : \"root\" , \"private\" : true , \"devDependencies\" : { \"lerna\" : \"^4.0.0\" } } 这代表什么意思呢 咱们看看 npm 文档中关于 private 的描述。 If you set \"private\": truein your package.json, then npm will refuse to publish it. 当 private设置为 true时 就代表你不需求在 npm公开发布这个包。看到这 有的读者可能会纳闷了 “这如同有点问题吧 组件库一般是要发布的呀 ” 不必慌 因为咱们选用的是 monorepo 架构 详细发布的组件库其实是 packages目录下的一个子包。而整个工程的主包则是用来组织起整个大结构 不发布到 npm也是能够了解的。 一起 这也符合 Yarn 1.X 版别的强制要求 假如需求用到 workspaces特性 有必要声明 private为 true。尽管 Yarn Modern Version 现已取消了这个约束 可是迟迟没有作为 Yarn 的默许装置版别 在晋级迁移这块还有不少阻力。 lena.json 咱们再调查一下 lerna.json这个文件 它经过 packages字段约定了子包都散布在哪些目录下 这儿支撑 glob pattern 匹配 也能够是一个 package 的 path。 { \"packages\" : [ \"packages/*\" ] , \"version\" : \"0.0.0\" } 关于 version字段 Lerna 供给了两种版别战略供咱们挑选 咱们应该怎样挑选呢 这儿先不打开说 免得大家发生太多疑问导致不必要的焦虑。 工程树立完毕后 咱们先与 remote 库房 您需求确保长途库房存在 相关一下 便利后续提交代码。假如您现已 fork 该库房 请将库房地址改成您自己的。 git remote add origin https: //github.com/cumt-robin/vue-pro-components.git 新建组件库子包 有了上面的根本结构 咱们能够着手新建一个组件库子包 这个包将寄存组件相关源码 这儿用到了 lerna create指令。咱们能够根据交互提示填上一些必要的信息 先把子包建好 一些信息能够后续再更改 不必过于纠结。 $ lerna create vue-pro-components // 在一步步提示下 先将一个npm子包树立起来 package name: (vue-pro-components) version: (0.0.0) description: pro components based on vue3 keywords: components,vue3,vite,typescript,unplugin,on demand,pro homepage: license: (ISC) MIT entry point: (lib/vue-pro-components.js) index.js git repository: 注意 我这儿用到的 package name 是 vue-pro-components 这个 name 也将作为我要发布到 npm 上的包名。 也不必担心这个包名 vue-pro-components 和整个工程的目录名相同 因为主工程是不会发布到 npm 的。 这儿先不急着加详细内容 因为咱们需求先把大的结构理清楚 持续往下看。 新建 playground 子包 playground 翻译过来便是游乐场 这个子包能够作为咱们调试组件体现的当地 这儿直接挑选用 Vite 初始化一个工程。 咱们测验一下不运用 lerna create指令新建 package。 cd packages && yarn create vite playground --template vue-ts 用 Vite 创立的这个 playground 包默许也是 private 的 playground 本来的作用便是调试或展现组件的根本作用 能够打包后作为一个 web 应用发布到公网 可是不需求发布到 npm 所以设置为 private 符合预期。 我该用哪种 version 战略 回到上文留下的疑问 两种版别战略 咱们该怎样选 Fixed/Locked mode (default) Fixed mode 意味着 version字段对应着详细的版别号 比方 0.1.0。在这种形式下 各个子包的版别号相对会集 一般来说能够了解为同一个版别号 也有例外 Lerna 会在履行 lerna version指令时根据用户的挑选自动更新 version字段 一起会修正发生过代码改变的子包的 package.json中的 version字段。 咱们能够来实验一下 先把代码 commit & push 到长途 这儿我用了一个新分支 c1。 // 回到根目录 git checkout -b c1 git add . git commit -m 'chore: 先将代码提交到长途 便利后续测验lerna version' git push -- set-upstream origin c1 文档中说到 假如当时 major 版别号是 0 则认为一切改变都是破坏性的 这意味着修正任何一个包中的内容 lerna version都会更新一切子包的版别号。咱们来试试 修正其间一个子包 vue-pro-components的内容 在 index.js加了一行注释 然后 commit 接着运用 lerna version更新版别号。 $ git add . $ git commit -m 'chore: 测验 major 版别号为 0 时修正一个包' $ lerna version lerna notice cli v5 .3 .0 lerna info current version 0.0 .0 lerna info Assuming all packages changed ? Select a new version (currently 0.0 .0) (Use arrow keys) > Patch ( 0.0 .1) Minor ( 0.1 .0) Major ( 1.0 .0) Prepatch ( 0.0 .1 -alpha .0) Preminor ( 0.1 .0 -alpha .0) Premajor ( 1.0 .0 -alpha .0) Custom Prerelease Custom Version 当咱们挑选 Patch 更新后 能够看到 两个子包的版别号都变成了 0.0.1 并且 lerna.json中的 version也变成了 0.0.1。 Changes: - playground: 0.0 .0 => 0.0 .1 (private) - vue-pro-components: 0.0 .0 => 0.0 .1 咱们再试试加一行注释 模仿把一个包的大版别号变成 1 的场景 能够看到两个包的版别号以及 lerna.json中的 version也变成了 1.0.0。 Changes: - playground: 0.0 .1 => 1.0 .0 (private) - vue-pro-components: 0.0 .1 => 1.0 .0 此刻 咱们再加一行注释 模仿引进一个 feature 再发起 minor 位的版别号改变 会发现仅有一个包的 version变成了 1.1.0 一起 lerna.json中的 version也变成 1.1.0 而另一个包的版别号没有变化 这看起来还比较合理 因为咱们认为主版别号 1 以上的是相对安稳的版别 按需更新版别号是比较合理的。 Changes: - vue-pro-components: 1.0 .0 => 1.1 .0 接着 咱们把两个包都改一点内容再测验一次。 Changes: - playground: 1.0 .0 => 1.1 .1 (private) - vue-pro-components: 1.1 .0 => 1.1 .1 做了这些测验咱们能够发现 lerna version做版别改变时 只会让咱们挑选一次版别 这一次挑选将作用到多个包上。 假定某次更新版别时 我期望一个包是 minor 更新 另一个包是 patch 更新 该怎样办呢 咱们持续往下看。 Independent mode Independent Mode 便是选用独立的版别号操控 会在履行 lerna version指令时逐一问询各个 package 的新版别号 咱们能够经过修正 lerna.json中的 version字段值为 independent打开这个形式。 当我只修正其间一个包 lerna version会提示我挑选一个版别号 这个版别号也将只作用到这个包上 其他的包不受影响。 $ lerna version lerna notice cli v5 .3 .0 lerna info versioning independent lerna info Looking for changed packages since v2 .0 .0 ? Select a new version for vue -pro -components (currently 2.0 .0) Patch ( 2.0 .1) Changes: - vue -pro -components: 2.0 .0 = > 2.0 .1 接着咱们修正两个包的内容再测验一次 Lerna 会让咱们单独为每个包挑选新的版别号。 $ lerna version lerna notice cli v5 .3 .0 lerna info versioning independent lerna info Looking for changed packages since vue -pro -components @3 .0 .0 ? Select a new version for playground (currently 2.0 .0) Minor ( 2.1 .0) ? Select a new version for vue -pro -components (currently 3.0 .0) Minor ( 3.1 .0) Changes: - playground: 2.0 .0 = > 2.1 .0 (private) - vue -pro -components: 3.0 .0 = > 3.1 .0 也便是说 Independent Mode 下 版别号是各管各的 按需挑选。 简略总结一下 在 Fixed Mode 下 lerna.json 中记录了各个包中最新的版别号。假如当时大版别号是 0 则修正任意一个包中的内容都会引起一切包的版别号更新 反之 仅更新变动的包的版别号。还有一个场景 便是持续挑选大版别的更新 也会引起一切包的版别号更新。总的来说 Fixed Mode 下 版别号捆绑性仍是很强的。而在 Independent Mode 下 各个包的版别号相对独立 需求开发者结合包的修正情况来手动挑选各个包的版别号。 个人主张 假如你的整个 monorepo 项目中各个子包联络性十分紧密 目标是对外供给一致的服务 那么 Fixed Mode 是一个不错的挑选 例如 Vue CLI 便是选用了 Fixed Mode。对用户来说 他享用的是整个 Vue CLI x.x.x 版别带来的才能 而不太关心 @vue/cli-ui 和 @vue/cli-service 现在是哪个版别。假如你的 monorepo 项目中各个子包联络性稍弱 对外供给多种才能 比方 Lint 装备、Utils 东西、 通用 Hooks、UI 库等等 那挑选 Independent Mode 则是一个不错的挑选 这种做法常见于企业内部 一般 monorepo 是作为整合多种才能的一个重要东西 既能在各个子包之间完成一部分复用 又能单独对外供给输出才能。当然 任何事情都不是一成不变的 假如你对版别操控欲很强 也能够果断挑选 Independent Mode。 我这儿挑选的是 Independent Mode。 子包之间的引证 对版别战略有个大略的知道后 咱们给子包之间树立一点联络 感受一下 monorepo 最大的魅力。 咱们先在 vue-pro-components子包写一个简略的组件 Icon 无需真正完成图标组件 仅仅用来测验一下。 < template> < i>{{ icon }} </ i> </ template> < script> export default { props: { icon: { type: String, default: '默许图标' } } } </ script> 一个大略的目录结构大概是这样的 因为 Vue3 组件需求用到结构依靠 咱们需求在 package.json中声明一个 peerDependencies。 \"peerDependencies\" : { \"vue\" : \"^3.2.0\" } 然后在项目根目录的 package.json中加一个一致装置依靠的脚本。 \"scripts\" : { \"bootstrap\" : \"lerna bootstrap -- --hoist\" } 接着履行这个 bootstrap指令 yarn bootstrap 咱们能够发现 在根目录中呈现了 node_modules目录 而在各个子包中没有呈现 node_modules 这是 --hoist在起作用 将依靠提高到了根目录 能够节约一部分空间。 咱们还注意到 vue-pro-components和 playground两个包也呈现在了 node_modules目录中 实践上它们是软链接 链接的源目录是 packages目录中对应的子包目录 这样的目录结构符合 Node 的模块加载战略 于是子包之间就能够像运用一个普通的 npm 包相同互相引证了。 软链接便是 symbolic link 类似于 Windows 体系中快捷方式的概念。可是在 Windows 体系中 workspace 的详细完成并不是快捷方式 而是选用了 junction。 lerna bootstrap不仅为各个 package 装置了自身的依靠 还将各个 package 以 symlink 的方式装置到了 node_modules中 让其他 package 具有了引证自己的才能。 接着咱们试着在 playground子包中引证一下 vue-pro-components子包的组件 Icon。 首先需求将 vue-pro-components作为 playground子包的一个依靠。 lerna add vue -pro -components --scope=playground import 引进组件并运用。 // 1. script 中引进 Icon 组件 import { Icon } from \"vue-pro-components\" // 2. template 中运用组件 < Icon icon= \"icon-up\"></ Icon> <br> < Icon icon= \"icon-down\"> </ Icon> 预览作用。这需求把 playground 这个子包的开发环境跑起来 也便是要履行它的 dev脚本。为了便利起见 咱们能够在项目根目录的 package.json中加一个 playground:dev脚本 这儿用到 lerna run 它能够根据 scope选项履行某个子包的脚本。 \"scripts\" : { \"bootstrap\" : \"lerna bootstrap -- --hoist\" , // 加入这条脚本 \"playground:dev\" : \"lerna run --scope playground dev\" } 这样 咱们就能够直接在根目录直接跑 playground 的开发环境了。尽管 Icon 组件还没什么太多的内容 可是咱们能够看到 playground 子包现已能够顺利引证 vue-pro-components 子包的组件了。 简略测验发布到 npm 整个组件库的工程装备一股脑说完 也是很难吸收的 咱们先来点简略的 也是最重要的一步 把组件库先发布到 npm 上。 首先你需求有一个 npm 账户。 有了账号后 能够来到你的项目工程目录下 经过终端登录 npm 能够输入 npm adduser或许 npm login进行登录。 npm adduser 假如登录失利 考虑你的 registry 是不是正确 假如用了国内的 npm 署理 主张登录时带上 --registry=https://registry.npmjs.org/参数。 登录成功后 就能够试着发布你的 npm 包了。 npm publish 能够发布包 可是在 lerna 项目中 咱们能够用 lerna publish替代。 一般 咱们会在项目中经过 .npmrc或许 .yarnrc装备一个国内的 registry 署理 加速装置依靠的速度。可是在发包的时候 咱们仍是要发布到 npm 官方的 registry 中 所以就需求给 lerna publish 装备一个 registry 参数 告诉 lerna publish 发布到哪个 registry 中。 咱们修正一下 lerna.json 一起 还有一个当地需求修正 那便是 vue-pro-components子包的 package.json 需求将其 publishConfig.access字段设置为 \"public\"。 从上图咱们能够知道 假如一个包是 scoped package 也便是带命名空间的包 例如它的包名是 @vue-pro-components/utils 关于这样的包 假如不设置 access为 \"public\" 是不能公开发布和装置的。尽管咱们发布的这个 vue-pro-components 不是 scoped package 可是为了养成一个好习惯 咱们仍是给它设置一下 access。 接着 咱们在根目录 package.json中增加一个脚本 便利咱们进行发布操作。 lerna publish from-package --yes 咱们试着履行这个 publish:package脚本 假如能看到下面这样的信息 就表示发布成功了。 结语 截至到现在 咱们只是在组件库开发环境树立上做了一些大略的测验 对一些关键节点做了验证 整个项目仍是处于一个十分粗陋的状态 可是读者们也不必担心内容的丰厚度 跟着专栏后续内容的深入 一些工程化装备 包含 TypeScript 也会慢慢完善起来。假如您对我的专栏感兴趣 欢迎您订阅重视本专栏 接下来能够一起讨论和交流组件库开发进程中遇到的问题。 专栏下篇文章传送门 实战案例 初探工程装备 & 图标组件热身 技能交流&闲聊 前端司南 CI/CD Element HTTP HTTPS 通用 it老兵哥 分享 收藏 点赞( 0) 上一篇 如何使用 SwiftUI 中新地图框架 MapKit 下一篇 【Java并发编程 第四章】无锁并发 相关文章 用这 18 个神奇的库 美化了我的项目 真是亮瞎我的眼 携手创作 共同成长 这是我参与「掘金日新计划 · 8 月更文挑战」的第14天 点... 1年前 0 0 504 RxSwift学习之 调度者 RxSwift调度者 案例引入 Schedulers 是RxSwift完成多线程... 12月前 0 0 33 OpenAI CEO 亲自辟谣「GPT-5传闻」 目前没有训练 短期内也不会训练 机器之心报导 修改 蛋酱 ChatGPT、GPT-4 掀起 AI 领域地震之后 ... 7月前 0 0 15 如何提高自己以致可以成功 ChatGPT.CEO 如何进步自己以致可以成功 how-to-be-successful。这是我在推上... 9月前 0 0 19 作者信息 it老兵哥 等级 普通 1879 文章 0 评论 0 收藏 查看作者其他文章 推广 0元建网站资源教程网 注册欧易领取 100比特币 前言 为什么挑选 monorepo yarn + workspaces Lerna pnpm Changesets Turborepo 技能选型 开发环境树立 创立 Lerna 工程 package.json lena.json 新建组件库子包 新建 playground 子包 我该用哪种 version 战略 子包之间的引证 简略测验发布到 npm 结语 COPYRIGHT © 2020-2023 IT技术6HU WWW.6HU.CC. ALLRIGHTS RESERVED. 鲁ICP备20017699号 首页 用户中心 投稿 首页 投稿 我的 Android iOS 人工智能 代码人生 前端 后端 开发工具 ","lang":null,"canonicalUrl":"https://www.6hu.cc/archives/87296.html","description":null,"urlTerms":["archives","html"],"titleTerms":["组","件","库","技","术","选","型","和","开","发","环","境","搭","建","六","虎"]}},{"timestamp":1702266216659,"collection":"favIcons","objectPk":"6hu.cc","operation":"update","object":{"hostname":"6hu.cc","favIcon":"/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAFA3PEY8MlBGQUZaVVBfeMiCeG5uePWvuZHI////////////////////////////////////////////////////2wBDAVVaWnhpeOuCguv/////////////////////////////////////////////////////////////////////////wAARCABAAEADASIAAhEBAxEB/8QAGAABAAMBAAAAAAAAAAAAAAAAAAECBAP/xAAhEAEBAQADAAEEAwAAAAAAAAABAAIDETFCEiEyUnGBkf/EABcBAAMBAAAAAAAAAAAAAAAAAAABAgP/xAAYEQEBAQEBAAAAAAAAAAAAAAAAARESAv/aAAwDAQACEQMRAD8A1HJh+RWEfEbJKei1sllOTR43TPN+x/k+oNdpQaNHY90zMlCh6hVeXB8iAzSSzQReo+XP2cmhc5HL3ms8m9e6f6uVa1kkLSSVEuielFsquMvoWPLTGV8udr3w5+lTssvVXmJqK1WtXEklIL4LMNsks2qNfi/xYwV6Du2P3IBk6DqcuFZrPng0+9F0zwZPVbrI0ZFTGTzJWkkb/9k="}},{"timestamp":1702266218151,"collection":"pages","objectPk":"6hu.cc/archives/87296.html","operation":"update","object":{"url":"6hu.cc/archives/87296.html","fullUrl":"https://www.6hu.cc/archives/87296.html","domain":"6hu.cc","hostname":"6hu.cc","fullTitle":"组件库技术选型和开发环境搭建-六虎","text":" Android iOS 人工智能 代码人生 前端 后端 开发工具 登录 组件库技术选型和开发环境搭建 2023-08-10 前端 1.1K 本文为稀土技能社区首发签约文章 14天内制止转载 14天后未获授权制止转载 侵权必究 专栏上篇文章传送门 根据Vite打造事务组件库 开篇介绍 专栏下篇文章传送门 实战案例 初探工程装备 & 图标组件热身 本节触及的内容源码可在vue-pro-components c1 分支找到 欢迎 star 支撑 前言 本文是 根据Vite+AntDesignVue打造事务组件库 专栏第 2 篇文章【组件库技能选型和开发环境树立】 为了让读者们沉溺式体会组件库开发 我将会手把手带着读者们树立起一个组件库的 monorepo 开发环境 相关源码可在 vue-pro-components 库房中获得。 为什么挑选 monorepo monorepo 这个词大家或多或少都听过 乃至现已在项目中应用过 问题来了 你能给 monorepo 下个界说吗 别慌 我也不会 咱们来看看维基百科给出的界说。 Inversion control systems, amonorepo(“mono” meaning ‘single’ and “repo” being short for ‘repository’) is a software development strategy where code for many projects is stored in the same repository. 可见 monorepo 的含义便是在一个单体库房中办理多个项目 这种项目办理形式在一些大型项目中现已被广泛应用 比方 Vite, Vue, React, Angular, React Native, Jest, Pinia, Vue CLI, Element Plus, Modern.js, Next.js 等。假如你打开这些项目库房 你能够发现其间一个很明显的共性 它们都选用了 packages目录来办理子包 每个子包中都包含一个 package.json文件 也便是说子包也是一个独立的 npm包。 进一步研究这些库房时 咱们能够发现 这些项目在支撑起整个 monorepo 体系时选用的技能计划是不相同的。 有的项目简略选用了 yarn workspaces 有的则运用了 Lerna 也有的用了 pnpm 还有的用了 Changesets 再卷一点的现已用上了 Turborepo。 Changesets 和 Turborepo 不能界说为 monorepo 计划 而是 monorepo 体系中强有力的配套东西。 鉴于笔者还未全面运用过以上一切计划 关于这些计划中的优缺点 无法给出客观的点评 读者们能够自行去查阅更多资料。 这儿简略给个参阅定见 帮助不了解这块的读者先有个大略的知道 如有错误 还请评论指出 yarn + workspaces yarn 内置的 workspaces 特性能够让子包之间的引证变得简略 其间也用到了 symbol link 在此根底上能够衍生出更多上层的才能 Lerna 便是在此根底上发展而来的东西。workspaces 支撑了 monorepo 最根底的才能 可是仅靠它也显得有点单薄 因为它没有供给包的全生命周期办理才能。 Yarn workspaces aim to make working withmonoreposeasy, solving one of the main use cases for yarn linkin a more declarative way. In short, they allow multiple projects to live together in the same repository AND to cross-reference each other any modification to one’s source code being instantly applied to the others. Lerna Lerna 能够处理上面说的问题 它供给了包的全生命周期办理才能 包含但不限于 新建子包 / 删去子包 / 办理子包依靠 / 发包 等等 并且有相关的指令行支撑 能较大程度上提高 monorepo 项目开发和维护功率。除此之外 Lerna 团队还极力提高性能和开发体会 详细见 Why Lerna? pnpm pnpm 从设计上就天然支撑了 monorepo 一起还经过 严格的依靠结构 / symbol link / hard link 等才能处理了 鬼魂依靠、依靠占用大量存储空间 等问题。pnpm 也能够搭配 Lerna 运用。 Changesets Changesets 是 pnpm 推荐的一个致力于处理改变记录集、changelog、version 等问题的东西 听说比 Lerna Version 这块的处理更科学。它有一个生产和消费 .changeset的进程 用户在一些复杂版别操控场景中有必定的自主操控权 因为你能够对 changeset 等内容做必定调整 自由度更高。 Turborepo Turbo 涡轮增压嘛 这便是要起飞的节奏 Turborepo 内部的中心代码是根据 Go 来完成的 这跟 esbuild 相同 直接是降维打击啊 简略看了一些 Turborepo 官网的文档 能够发现 Turborepo是专注于提高构建性能的东西和渠道 它在 Pipeline 编列、Output Caching、Remote Caching、Output Replaying 等方面做了许多尽力 相同的事情不做第二次 这与 Lerna 现在的办理团队 Nrwl 研发的构建渠道 Nx 的发力方向有点类似。 合理的 Pipeline 编列能够最大限度发挥 CPU 性能。缓存用好了真的是一把利刃 关于重复的工作 得到秒级乃至毫秒级的响应是真的香 这在 monorepo 项目中尤其重要 因为你不知道一个 monorepo 可能会演变成多大的工程 而且 Remote Caching 在 CI/CD 中也能发挥很大作用 为什么这些明星项目都不谋而合挑选了 monorepo 呢 背后的原因可能有这些 现代前端工程的复杂度在不断提高 使得拆包成为了必然趋势。 可是把一个大型项目拆成多个库房又让办理和联调变得十分困难 npm link之类的计划开发体会太差。 现在最佳的计划仍是在一个库房维护 然后经过技能手段改善单体库房的下风 既能保持子包之间的独立性 又能让包之间联调变得简略。 使得集成化的 CI/CD 变得更加速捷。 更多亮点值得探究…… 技能选型 在组件库的技能选型这块没有太多可说的 根本上是环绕项目的需求和自身的才能打开 依照开发进程中的实践需求引进相关的技能计划。这中间会存在片面意愿 仅供参阅 Monorepo: 我仍是挑选了保守一点的 Lerna 这个我相对熟悉一点 一起也是想多踩踩坑 知道坑在哪里 才能明白为什么要换更好的东西。 前端结构 如专栏标题所述 我挑选了个人更熟悉的 Vue3 生态。 类型支撑: TypeScript。 根底 UI 组件库 AntDesignVue 承继了 AntDesign 的企业级设计风格 个人感觉 AntDesignVue 相对其他 Vue 生态的组件库更有质感 可是它也不是完美的。 构建东西 Vite, Rollup, Gulp 以及相关插件生态。组件库建设是一个相对复杂的工程 很难依靠一种东西把一切事宜处理完毕 所以整合东西链是必要的。 CSS预处理器 Less。挑选 Less 主要是考虑后续切换主题 这块 Less 比较好处理 纯属个人片面定见 究竟还有不依靠 preprocessor 的 。 发布流程东西 release-it。 CI/CD: Github Actions。这个没有强制要求 有许多挑选。 标准/束缚之类的 ESLint, Prettier, StyleLint, husky, commitizen 等等。 更多…… 开发环境树立 说太多概念也不太容易消化 咱们来实操一下。 创立 Lerna 工程 首先咱们需求新建并进入 vue-pro-components工程目录 接着经过 npx lerna init创立一个工程。 $ mkdir vue-pro-components && cd vue-pro-components $ npx lerna init lerna notice cli v4.0.0 lerna info Initializing Git repository lerna info Creating package.json lerna info Creating lerna.json lerna info Creating packages directory lerna success Initialized Lerna files 能够发现 Lerna 为咱们生成了一个 monorepo 项目的根本骨架 $ tree . |-- lerna.json |-- package.json ` -- packages package.json 大略看一下 package.json中的 private字段设置为了 true。 { \"name\" : \"root\" , \"private\" : true , \"devDependencies\" : { \"lerna\" : \"^4.0.0\" } } 这代表什么意思呢 咱们看看 npm 文档中关于 private 的描述。 If you set \"private\": truein your package.json, then npm will refuse to publish it. 当 private设置为 true时 就代表你不需求在 npm公开发布这个包。看到这 有的读者可能会纳闷了 “这如同有点问题吧 组件库一般是要发布的呀 ” 不必慌 因为咱们选用的是 monorepo 架构 详细发布的组件库其实是 packages目录下的一个子包。而整个工程的主包则是用来组织起整个大结构 不发布到 npm也是能够了解的。 一起 这也符合 Yarn 1.X 版别的强制要求 假如需求用到 workspaces特性 有必要声明 private为 true。尽管 Yarn Modern Version 现已取消了这个约束 可是迟迟没有作为 Yarn 的默许装置版别 在晋级迁移这块还有不少阻力。 lena.json 咱们再调查一下 lerna.json这个文件 它经过 packages字段约定了子包都散布在哪些目录下 这儿支撑 glob pattern 匹配 也能够是一个 package 的 path。 { \"packages\" : [ \"packages/*\" ] , \"version\" : \"0.0.0\" } 关于 version字段 Lerna 供给了两种版别战略供咱们挑选 咱们应该怎样挑选呢 这儿先不打开说 免得大家发生太多疑问导致不必要的焦虑。 工程树立完毕后 咱们先与 remote 库房 您需求确保长途库房存在 相关一下 便利后续提交代码。假如您现已 fork 该库房 请将库房地址改成您自己的。 git remote add origin https: //github.com/cumt-robin/vue-pro-components.git 新建组件库子包 有了上面的根本结构 咱们能够着手新建一个组件库子包 这个包将寄存组件相关源码 这儿用到了 lerna create指令。咱们能够根据交互提示填上一些必要的信息 先把子包建好 一些信息能够后续再更改 不必过于纠结。 $ lerna create vue-pro-components // 在一步步提示下 先将一个npm子包树立起来 package name: (vue-pro-components) version: (0.0.0) description: pro components based on vue3 keywords: components,vue3,vite,typescript,unplugin,on demand,pro homepage: license: (ISC) MIT entry point: (lib/vue-pro-components.js) index.js git repository: 注意 我这儿用到的 package name 是 vue-pro-components 这个 name 也将作为我要发布到 npm 上的包名。 也不必担心这个包名 vue-pro-components 和整个工程的目录名相同 因为主工程是不会发布到 npm 的。 这儿先不急着加详细内容 因为咱们需求先把大的结构理清楚 持续往下看。 新建 playground 子包 playground 翻译过来便是游乐场 这个子包能够作为咱们调试组件体现的当地 这儿直接挑选用 Vite 初始化一个工程。 咱们测验一下不运用 lerna create指令新建 package。 cd packages && yarn create vite playground --template vue-ts 用 Vite 创立的这个 playground 包默许也是 private 的 playground 本来的作用便是调试或展现组件的根本作用 能够打包后作为一个 web 应用发布到公网 可是不需求发布到 npm 所以设置为 private 符合预期。 我该用哪种 version 战略 回到上文留下的疑问 两种版别战略 咱们该怎样选 Fixed/Locked mode (default) Fixed mode 意味着 version字段对应着详细的版别号 比方 0.1.0。在这种形式下 各个子包的版别号相对会集 一般来说能够了解为同一个版别号 也有例外 Lerna 会在履行 lerna version指令时根据用户的挑选自动更新 version字段 一起会修正发生过代码改变的子包的 package.json中的 version字段。 咱们能够来实验一下 先把代码 commit & push 到长途 这儿我用了一个新分支 c1。 // 回到根目录 git checkout -b c1 git add . git commit -m 'chore: 先将代码提交到长途 便利后续测验lerna version' git push -- set-upstream origin c1 文档中说到 假如当时 major 版别号是 0 则认为一切改变都是破坏性的 这意味着修正任何一个包中的内容 lerna version都会更新一切子包的版别号。咱们来试试 修正其间一个子包 vue-pro-components的内容 在 index.js加了一行注释 然后 commit 接着运用 lerna version更新版别号。 $ git add . $ git commit -m 'chore: 测验 major 版别号为 0 时修正一个包' $ lerna version lerna notice cli v5 .3 .0 lerna info current version 0.0 .0 lerna info Assuming all packages changed ? Select a new version (currently 0.0 .0) (Use arrow keys) > Patch ( 0.0 .1) Minor ( 0.1 .0) Major ( 1.0 .0) Prepatch ( 0.0 .1 -alpha .0) Preminor ( 0.1 .0 -alpha .0) Premajor ( 1.0 .0 -alpha .0) Custom Prerelease Custom Version 当咱们挑选 Patch 更新后 能够看到 两个子包的版别号都变成了 0.0.1 并且 lerna.json中的 version也变成了 0.0.1。 Changes: - playground: 0.0 .0 => 0.0 .1 (private) - vue-pro-components: 0.0 .0 => 0.0 .1 咱们再试试加一行注释 模仿把一个包的大版别号变成 1 的场景 能够看到两个包的版别号以及 lerna.json中的 version也变成了 1.0.0。 Changes: - playground: 0.0 .1 => 1.0 .0 (private) - vue-pro-components: 0.0 .1 => 1.0 .0 此刻 咱们再加一行注释 模仿引进一个 feature 再发起 minor 位的版别号改变 会发现仅有一个包的 version变成了 1.1.0 一起 lerna.json中的 version也变成 1.1.0 而另一个包的版别号没有变化 这看起来还比较合理 因为咱们认为主版别号 1 以上的是相对安稳的版别 按需更新版别号是比较合理的。 Changes: - vue-pro-components: 1.0 .0 => 1.1 .0 接着 咱们把两个包都改一点内容再测验一次。 Changes: - playground: 1.0 .0 => 1.1 .1 (private) - vue-pro-components: 1.1 .0 => 1.1 .1 做了这些测验咱们能够发现 lerna version做版别改变时 只会让咱们挑选一次版别 这一次挑选将作用到多个包上。 假定某次更新版别时 我期望一个包是 minor 更新 另一个包是 patch 更新 该怎样办呢 咱们持续往下看。 Independent mode Independent Mode 便是选用独立的版别号操控 会在履行 lerna version指令时逐一问询各个 package 的新版别号 咱们能够经过修正 lerna.json中的 version字段值为 independent打开这个形式。 当我只修正其间一个包 lerna version会提示我挑选一个版别号 这个版别号也将只作用到这个包上 其他的包不受影响。 $ lerna version lerna notice cli v5 .3 .0 lerna info versioning independent lerna info Looking for changed packages since v2 .0 .0 ? Select a new version for vue -pro -components (currently 2.0 .0) Patch ( 2.0 .1) Changes: - vue -pro -components: 2.0 .0 = > 2.0 .1 接着咱们修正两个包的内容再测验一次 Lerna 会让咱们单独为每个包挑选新的版别号。 $ lerna version lerna notice cli v5 .3 .0 lerna info versioning independent lerna info Looking for changed packages since vue -pro -components @3 .0 .0 ? Select a new version for playground (currently 2.0 .0) Minor ( 2.1 .0) ? Select a new version for vue -pro -components (currently 3.0 .0) Minor ( 3.1 .0) Changes: - playground: 2.0 .0 = > 2.1 .0 (private) - vue -pro -components: 3.0 .0 = > 3.1 .0 也便是说 Independent Mode 下 版别号是各管各的 按需挑选。 简略总结一下 在 Fixed Mode 下 lerna.json 中记录了各个包中最新的版别号。假如当时大版别号是 0 则修正任意一个包中的内容都会引起一切包的版别号更新 反之 仅更新变动的包的版别号。还有一个场景 便是持续挑选大版别的更新 也会引起一切包的版别号更新。总的来说 Fixed Mode 下 版别号捆绑性仍是很强的。而在 Independent Mode 下 各个包的版别号相对独立 需求开发者结合包的修正情况来手动挑选各个包的版别号。 个人主张 假如你的整个 monorepo 项目中各个子包联络性十分紧密 目标是对外供给一致的服务 那么 Fixed Mode 是一个不错的挑选 例如 Vue CLI 便是选用了 Fixed Mode。对用户来说 他享用的是整个 Vue CLI x.x.x 版别带来的才能 而不太关心 @vue/cli-ui 和 @vue/cli-service 现在是哪个版别。假如你的 monorepo 项目中各个子包联络性稍弱 对外供给多种才能 比方 Lint 装备、Utils 东西、 通用 Hooks、UI 库等等 那挑选 Independent Mode 则是一个不错的挑选 这种做法常见于企业内部 一般 monorepo 是作为整合多种才能的一个重要东西 既能在各个子包之间完成一部分复用 又能单独对外供给输出才能。当然 任何事情都不是一成不变的 假如你对版别操控欲很强 也能够果断挑选 Independent Mode。 我这儿挑选的是 Independent Mode。 子包之间的引证 对版别战略有个大略的知道后 咱们给子包之间树立一点联络 感受一下 monorepo 最大的魅力。 咱们先在 vue-pro-components子包写一个简略的组件 Icon 无需真正完成图标组件 仅仅用来测验一下。 < template> < i>{{ icon }} </ i> </ template> < script> export default { props: { icon: { type: String, default: '默许图标' } } } </ script> 一个大略的目录结构大概是这样的 因为 Vue3 组件需求用到结构依靠 咱们需求在 package.json中声明一个 peerDependencies。 \"peerDependencies\" : { \"vue\" : \"^3.2.0\" } 然后在项目根目录的 package.json中加一个一致装置依靠的脚本。 \"scripts\" : { \"bootstrap\" : \"lerna bootstrap -- --hoist\" } 接着履行这个 bootstrap指令 yarn bootstrap 咱们能够发现 在根目录中呈现了 node_modules目录 而在各个子包中没有呈现 node_modules 这是 --hoist在起作用 将依靠提高到了根目录 能够节约一部分空间。 咱们还注意到 vue-pro-components和 playground两个包也呈现在了 node_modules目录中 实践上它们是软链接 链接的源目录是 packages目录中对应的子包目录 这样的目录结构符合 Node 的模块加载战略 于是子包之间就能够像运用一个普通的 npm 包相同互相引证了。 软链接便是 symbolic link 类似于 Windows 体系中快捷方式的概念。可是在 Windows 体系中 workspace 的详细完成并不是快捷方式 而是选用了 junction。 lerna bootstrap不仅为各个 package 装置了自身的依靠 还将各个 package 以 symlink 的方式装置到了 node_modules中 让其他 package 具有了引证自己的才能。 接着咱们试着在 playground子包中引证一下 vue-pro-components子包的组件 Icon。 首先需求将 vue-pro-components作为 playground子包的一个依靠。 lerna add vue -pro -components --scope=playground import 引进组件并运用。 // 1. script 中引进 Icon 组件 import { Icon } from \"vue-pro-components\" // 2. template 中运用组件 < Icon icon= \"icon-up\"></ Icon> <br> < Icon icon= \"icon-down\"> </ Icon> 预览作用。这需求把 playground 这个子包的开发环境跑起来 也便是要履行它的 dev脚本。为了便利起见 咱们能够在项目根目录的 package.json中加一个 playground:dev脚本 这儿用到 lerna run 它能够根据 scope选项履行某个子包的脚本。 \"scripts\" : { \"bootstrap\" : \"lerna bootstrap -- --hoist\" , // 加入这条脚本 \"playground:dev\" : \"lerna run --scope playground dev\" } 这样 咱们就能够直接在根目录直接跑 playground 的开发环境了。尽管 Icon 组件还没什么太多的内容 可是咱们能够看到 playground 子包现已能够顺利引证 vue-pro-components 子包的组件了。 简略测验发布到 npm 整个组件库的工程装备一股脑说完 也是很难吸收的 咱们先来点简略的 也是最重要的一步 把组件库先发布到 npm 上。 首先你需求有一个 npm 账户。 有了账号后 能够来到你的项目工程目录下 经过终端登录 npm 能够输入 npm adduser或许 npm login进行登录。 npm adduser 假如登录失利 考虑你的 registry 是不是正确 假如用了国内的 npm 署理 主张登录时带上 --registry=https://registry.npmjs.org/参数。 登录成功后 就能够试着发布你的 npm 包了。 npm publish 能够发布包 可是在 lerna 项目中 咱们能够用 lerna publish替代。 一般 咱们会在项目中经过 .npmrc或许 .yarnrc装备一个国内的 registry 署理 加速装置依靠的速度。可是在发包的时候 咱们仍是要发布到 npm 官方的 registry 中 所以就需求给 lerna publish 装备一个 registry 参数 告诉 lerna publish 发布到哪个 registry 中。 咱们修正一下 lerna.json 一起 还有一个当地需求修正 那便是 vue-pro-components子包的 package.json 需求将其 publishConfig.access字段设置为 \"public\"。 从上图咱们能够知道 假如一个包是 scoped package 也便是带命名空间的包 例如它的包名是 @vue-pro-components/utils 关于这样的包 假如不设置 access为 \"public\" 是不能公开发布和装置的。尽管咱们发布的这个 vue-pro-components 不是 scoped package 可是为了养成一个好习惯 咱们仍是给它设置一下 access。 接着 咱们在根目录 package.json中增加一个脚本 便利咱们进行发布操作。 lerna publish from-package --yes 咱们试着履行这个 publish:package脚本 假如能看到下面这样的信息 就表示发布成功了。 结语 截至到现在 咱们只是在组件库开发环境树立上做了一些大略的测验 对一些关键节点做了验证 整个项目仍是处于一个十分粗陋的状态 可是读者们也不必担心内容的丰厚度 跟着专栏后续内容的深入 一些工程化装备 包含 TypeScript 也会慢慢完善起来。假如您对我的专栏感兴趣 欢迎您订阅重视本专栏 接下来能够一起讨论和交流组件库开发进程中遇到的问题。 专栏下篇文章传送门 实战案例 初探工程装备 & 图标组件热身 技能交流&闲聊 前端司南 CI/CD Element HTTP HTTPS 通用 it老兵哥 分享 收藏 点赞( 0) 上一篇 如何使用 SwiftUI 中新地图框架 MapKit 下一篇 【Java并发编程 第四章】无锁并发 相关文章 用这 18 个神奇的库 美化了我的项目 真是亮瞎我的眼 携手创作 共同成长 这是我参与「掘金日新计划 · 8 月更文挑战」的第14天 点... 1年前 0 0 504 RxSwift学习之 调度者 RxSwift调度者 案例引入 Schedulers 是RxSwift完成多线程... 12月前 0 0 33 OpenAI CEO 亲自辟谣「GPT-5传闻」 目前没有训练 短期内也不会训练 机器之心报导 修改 蛋酱 ChatGPT、GPT-4 掀起 AI 领域地震之后 ... 7月前 0 0 15 如何提高自己以致可以成功 ChatGPT.CEO 如何进步自己以致可以成功 how-to-be-successful。这是我在推上... 9月前 0 0 19 作者信息 it老兵哥 等级 普通 1879 文章 0 评论 0 收藏 查看作者其他文章 推广 0元建网站资源教程网 注册欧易领取 100比特币 前言 为什么挑选 monorepo yarn + workspaces Lerna pnpm Changesets Turborepo 技能选型 开发环境树立 创立 Lerna 工程 package.json lena.json 新建组件库子包 新建 playground 子包 我该用哪种 version 战略 子包之间的引证 简略测验发布到 npm 结语 COPYRIGHT © 2020-2023 IT技术6HU WWW.6HU.CC. ALLRIGHTS RESERVED. 鲁ICP备20017699号 首页 用户中心 投稿 首页 投稿 我的 Android iOS 人工智能 代码人生 前端 后端 开发工具 ","lang":null,"canonicalUrl":"https://www.6hu.cc/archives/87296.html","description":null,"urlTerms":["archives","html"],"titleTerms":["组","件","库","技","术","选","型","和","开","发","环","境","搭","建","六","虎"]}},{"timestamp":1702266218171,"collection":"pageListEntries","objectPk":[20201014,"6hu.cc/archives/87296.html"],"operation":"update","object":{"listId":20201014,"pageUrl":"6hu.cc/archives/87296.html","fullUrl":"https://www.6hu.cc/archives/87296.html","createdAt":"2023-12-07T10:06:03.408Z"}},{"timestamp":1702266218193,"collection":"visits","objectPk":[1701943563442,"6hu.cc/archives/87296.html"],"operation":"update","object":{"url":"6hu.cc/archives/87296.html","time":1701943563442,"duration":null,"scrollMaxPx":null,"scrollMaxPerc":null,"scrollPerc":null,"scrollPx":null}},{"timestamp":1702266218735,"collection":"pages","objectPk":"developers.pub/article/1135520","operation":"update","object":{"url":"developers.pub/article/1135520","fullUrl":"https://www.developers.pub/article/1135520","domain":"developers.pub","hostname":"developers.pub","fullTitle":"2023 年前端工程化都在谈些什么-开发者客栈-帮助开发者面试的平台-顽强网络","text":" 开发者客栈 文章 问答 Wiki 动态 简历 Todo 文章 发布 登 录 2023 年前端工程化都在谈些什么 客栈小K | 603 | 2023-01-31 什么是前端工程化 是我去年困扰我很久的一个问题 打开搜索引擎一搜 能找到四个关键字 模块化、组件化、规范化、自动化 但一看这几个字 更加迷茫了 没说解决了什么问题。大部分搜出来的都是 webpack、babel、eslint、gulp 等编译相关的配置 对于 2023年 来说上面的回答着实有点管中窥豹了 大家也可以想想和评论区交流下 你觉得什么是前端工程化 最好有具体的实践 契机 前年年中和去年一年的时间里面 公司一直在推行效能提升 然后出现了一些前端中台部门 开启大前端时代 当时有三个虚拟小组 微前端架构为主的公共组件部门 脚手架为主的工具链部门 BFF 为主的 node.js 框架部门 我有幸加入了其中一个虚拟小组 脚手架部门 这方面的可以查一下 类似 CRA 、 vue-cli 其实我们就是弄了一套自己公司规范的脚手架 当时我是开发里面其中的 ts + react 编码统一体验的功能 细嚼慢咽 Typescript + React17 +Eslint + Git hook 工作流 后来我就在想。这种传统脚手架 好像成就感不是很大 无非就是公司技术栈 + 开源库 然后混在一起 执行命令简化流程 后来我就在想能不能写一点有用的工具 能不能把工具嵌入到脚手架里面 显得自己很牛皮 too young 后来就有了四个产品 根据 BFF 代码自动生成前端文档的脚本 解决后端经常来问前端某个接口聚合了哪几个后端接口的问题 前端代码走查工具 eruda-pixel 提高了前端开发的质量和减少设计师验收打回的次数 纯前端实现的配置化 A、B test方案 解决了无后端资源支持的传统 A、B test 方案 beta 版自动化测试平台 保证主流程代码无破坏性的修改 思考 直到有一天 猛的发现 前端工程化其实就是利用工具链解决前端在开发过程中提升效率和质量的问题 质量 效率 记住这两点 后面会举大量的例子 来证明这两个结论 后面还会再补充一个 协作 历史 前端历史这一块不多介绍了 以前是没有前端编译 模块打包之类的 都是写什么就上线什么 所以后面出了模块加载器保证代码顺序加载而不会出错 前端编译保证兼容性和 tree-shaking 等 这就是第一代的前端工程化 前端工程化 我的理解是 前端工程化就是围绕敏捷开发流程 保证项目在团队协作过程中 能快速达到交付的标准 降低事故 所以答案呼之欲出了。想尽办法 提高持续交付的能力。 敏捷开发在一般的公司 都会有下面这几步 评审、准备开发、开发阶段、发布交付、上线。那就可以在这几步里面去提高效率 保证代码质量 评审 UI 标准规范 组件库 物料库 准备开发 仓库的创建 devops 平台 例如域名地址生成 网关路径匹配 项目初始化 也就是脚手架初始化项目 包管理 monorepo 文件管理、目录管理等规范 js、css 等规范 开发阶段 git 分支管理 code review 等 IDE 编译相关 也就是基于 webpack、vite 等 eslint 等大家熟知的工具链相关 私有化 npm 仓库 本地 mock 服务 打包配置 单元测试 发布交付 git hook 提交等流水相关 打包构建 CDN 相关 jenkins、 docker、k8s 等镜像管理 自动化测试 A、B test 上线 前端监控 埋点 技术卷技术 具有普遍性 其实上面举得例子都是技术卷技术 它是一种可迁移到任何一家公司的技术方案 例如 git 分支管理 就是保证了能团队能并行开发 代码减少冲突 提交团队协作 mock 服务 提高跟后端开发的效率 建立了一种约定式开发的协作流程 前端监控 保证了 bug 出现之后 能快速修复 单元测试和 code review 是保证质量的 ui 规范和物料库 都是提高开发效率的 为什么会叫技术卷技术 正常情况下 难题会分成两种 一种是业务复杂度 一种叫偶然复杂度 技术卷技术 就是解决偶然复杂度的 就好像有句话叫做 兵未动 粮草先行 还有一句话叫做非战斗减员 其实就是让无关业务的问题下沉 尽量保证在开发的过程中不会出现或者不需要考虑。 设想一下。如果没有这种普遍性的前端工程化 新入职的小黄满怀期待的装好 vscode, 一打开 代码格式有 2 个缩进 有的是 4 个缩进 然后执行 npm install 却出现好多的 error,当小黄花了半小时解决了包版本的问题 npm start 启动 居然打开是空页面 废了半天的时间 才发现是环境变量导致域名不匹配的和跨域的问题 当小黄好不容易写完代码 准备联调 却发现怎么也调不通 小黄怒气冲冲的去找后端 后端笑着说 不好意思。改了一个接口没跟你说。终于联调完了。准备部署了 设计师却说 这里要再改改颜色和圆角度数 小黄说 这是按照你说的开发的 设计却说我没说 你就再改改吧 几分钟的事情。好不容易发布上线 居然踩坑了 主流程挂了 小黄要背锅了。经历了这一波之后 再也没见过小黄了 垃圾公司 。 技术卷业务 升职加薪 这方面是根据某一行的业务来的 不具有普遍性 大家可以多交流 后面会单独开一篇文章讲技术卷业务 这里说一下 技术卷技术 提高前端工程化的能力 技术卷业务 提高前端架构的能力 如何提高前端工程化能力 就是多看 多学习 多交流 见得多了 就自然会了 例如 一键生成 icon 组件 一键生成组件模板 一键压缩图片 一键部署 cdn、oss 等 完整流程的云 devops 平台 阿里云监控 远程组件加载 文档、单元测试的生成 例如 storybook modern.js 总结 前端工程化就是围绕敏捷开发流程 保证项目在团队协作过程中 能快速达到交付的标准 降低事故 主要从这几步中去发力 评审、准备开发、开发阶段、发布交付、上线。 提前祝大家新春快乐 身体健康 看完喜欢的感觉有收获的点个赞吧 文章标签 前端相关 推荐指数 转载声明 原作者 乘风gg 转载自: 《2023 年前端工程化都在谈些什么》 如有侵权 请联系本站删除。 真诚点赞 手留余香 2023 年前端工程化都在谈些什么 提交评论 关于作者 客栈小K 关 注 理智和疯狂并存 等级 LV3 粉丝 11 获赞 53 经验 596 为了本站的长期运营 请将我们的网站加入广告拦截器的白名单 感谢您的支持 万维 广告 随便看看 万物皆空之 JavaScript 原型 黑夜尽头 844 2 编写一个简单的JavaScript模板引擎 FX 692 2 说说对React中类组件和函数组件的理解 有什么区别 动感超人 531 0 老大让我优化数据库 我上来就分库分表 他过来就是一jio 孤音 393 1 再也不用手动改package.json的版本号 蔡文姬 230 0 2023 年前端工程化都在谈些什么 契机 思考 历史 前端工程化 评审 准备开发 开发阶段 发布交付 上线 技术卷技术 具有普遍性 技术卷业务 升职加薪 如何提高前端工程化能力 总结 评论 网上有害信息举报专区 | 浙ICP备2021032878号-1 | 关于我们 ","lang":null,"canonicalUrl":"https://www.developers.pub/article/1135520","description":null,"urlTerms":["article"],"titleTerms":["2023","年","前","端","工","程","化","都","在","谈","些","什","么","开","发","者","客","栈","帮","助","面","试","的","平","台","顽","强","网","络"]}},{"timestamp":1702266220133,"collection":"favIcons","objectPk":"developers.pub","operation":"update","object":{"hostname":"developers.pub","favIcon":""}},{"timestamp":1702266222119,"collection":"pages","objectPk":"developers.pub/article/1135520","operation":"update","object":{"url":"developers.pub/article/1135520","fullUrl":"https://www.developers.pub/article/1135520","domain":"developers.pub","hostname":"developers.pub","fullTitle":"2023 年前端工程化都在谈些什么-开发者客栈-帮助开发者面试的平台-顽强网络","text":" 开发者客栈 文章 问答 Wiki 动态 简历 Todo 文章 发布 登 录 2023 年前端工程化都在谈些什么 客栈小K | 603 | 2023-01-31 什么是前端工程化 是我去年困扰我很久的一个问题 打开搜索引擎一搜 能找到四个关键字 模块化、组件化、规范化、自动化 但一看这几个字 更加迷茫了 没说解决了什么问题。大部分搜出来的都是 webpack、babel、eslint、gulp 等编译相关的配置 对于 2023年 来说上面的回答着实有点管中窥豹了 大家也可以想想和评论区交流下 你觉得什么是前端工程化 最好有具体的实践 契机 前年年中和去年一年的时间里面 公司一直在推行效能提升 然后出现了一些前端中台部门 开启大前端时代 当时有三个虚拟小组 微前端架构为主的公共组件部门 脚手架为主的工具链部门 BFF 为主的 node.js 框架部门 我有幸加入了其中一个虚拟小组 脚手架部门 这方面的可以查一下 类似 CRA 、 vue-cli 其实我们就是弄了一套自己公司规范的脚手架 当时我是开发里面其中的 ts + react 编码统一体验的功能 细嚼慢咽 Typescript + React17 +Eslint + Git hook 工作流 后来我就在想。这种传统脚手架 好像成就感不是很大 无非就是公司技术栈 + 开源库 然后混在一起 执行命令简化流程 后来我就在想能不能写一点有用的工具 能不能把工具嵌入到脚手架里面 显得自己很牛皮 too young 后来就有了四个产品 根据 BFF 代码自动生成前端文档的脚本 解决后端经常来问前端某个接口聚合了哪几个后端接口的问题 前端代码走查工具 eruda-pixel 提高了前端开发的质量和减少设计师验收打回的次数 纯前端实现的配置化 A、B test方案 解决了无后端资源支持的传统 A、B test 方案 beta 版自动化测试平台 保证主流程代码无破坏性的修改 思考 直到有一天 猛的发现 前端工程化其实就是利用工具链解决前端在开发过程中提升效率和质量的问题 质量 效率 记住这两点 后面会举大量的例子 来证明这两个结论 后面还会再补充一个 协作 历史 前端历史这一块不多介绍了 以前是没有前端编译 模块打包之类的 都是写什么就上线什么 所以后面出了模块加载器保证代码顺序加载而不会出错 前端编译保证兼容性和 tree-shaking 等 这就是第一代的前端工程化 前端工程化 我的理解是 前端工程化就是围绕敏捷开发流程 保证项目在团队协作过程中 能快速达到交付的标准 降低事故 所以答案呼之欲出了。想尽办法 提高持续交付的能力。 敏捷开发在一般的公司 都会有下面这几步 评审、准备开发、开发阶段、发布交付、上线。那就可以在这几步里面去提高效率 保证代码质量 评审 UI 标准规范 组件库 物料库 准备开发 仓库的创建 devops 平台 例如域名地址生成 网关路径匹配 项目初始化 也就是脚手架初始化项目 包管理 monorepo 文件管理、目录管理等规范 js、css 等规范 开发阶段 git 分支管理 code review 等 IDE 编译相关 也就是基于 webpack、vite 等 eslint 等大家熟知的工具链相关 私有化 npm 仓库 本地 mock 服务 打包配置 单元测试 发布交付 git hook 提交等流水相关 打包构建 CDN 相关 jenkins、 docker、k8s 等镜像管理 自动化测试 A、B test 上线 前端监控 埋点 技术卷技术 具有普遍性 其实上面举得例子都是技术卷技术 它是一种可迁移到任何一家公司的技术方案 例如 git 分支管理 就是保证了能团队能并行开发 代码减少冲突 提交团队协作 mock 服务 提高跟后端开发的效率 建立了一种约定式开发的协作流程 前端监控 保证了 bug 出现之后 能快速修复 单元测试和 code review 是保证质量的 ui 规范和物料库 都是提高开发效率的 为什么会叫技术卷技术 正常情况下 难题会分成两种 一种是业务复杂度 一种叫偶然复杂度 技术卷技术 就是解决偶然复杂度的 就好像有句话叫做 兵未动 粮草先行 还有一句话叫做非战斗减员 其实就是让无关业务的问题下沉 尽量保证在开发的过程中不会出现或者不需要考虑。 设想一下。如果没有这种普遍性的前端工程化 新入职的小黄满怀期待的装好 vscode, 一打开 代码格式有 2 个缩进 有的是 4 个缩进 然后执行 npm install 却出现好多的 error,当小黄花了半小时解决了包版本的问题 npm start 启动 居然打开是空页面 废了半天的时间 才发现是环境变量导致域名不匹配的和跨域的问题 当小黄好不容易写完代码 准备联调 却发现怎么也调不通 小黄怒气冲冲的去找后端 后端笑着说 不好意思。改了一个接口没跟你说。终于联调完了。准备部署了 设计师却说 这里要再改改颜色和圆角度数 小黄说 这是按照你说的开发的 设计却说我没说 你就再改改吧 几分钟的事情。好不容易发布上线 居然踩坑了 主流程挂了 小黄要背锅了。经历了这一波之后 再也没见过小黄了 垃圾公司 。 技术卷业务 升职加薪 这方面是根据某一行的业务来的 不具有普遍性 大家可以多交流 后面会单独开一篇文章讲技术卷业务 这里说一下 技术卷技术 提高前端工程化的能力 技术卷业务 提高前端架构的能力 如何提高前端工程化能力 就是多看 多学习 多交流 见得多了 就自然会了 例如 一键生成 icon 组件 一键生成组件模板 一键压缩图片 一键部署 cdn、oss 等 完整流程的云 devops 平台 阿里云监控 远程组件加载 文档、单元测试的生成 例如 storybook modern.js 总结 前端工程化就是围绕敏捷开发流程 保证项目在团队协作过程中 能快速达到交付的标准 降低事故 主要从这几步中去发力 评审、准备开发、开发阶段、发布交付、上线。 提前祝大家新春快乐 身体健康 看完喜欢的感觉有收获的点个赞吧 文章标签 前端相关 推荐指数 转载声明 原作者 乘风gg 转载自: 《2023 年前端工程化都在谈些什么》 如有侵权 请联系本站删除。 真诚点赞 手留余香 2023 年前端工程化都在谈些什么 提交评论 关于作者 客栈小K 关 注 理智和疯狂并存 等级 LV3 粉丝 11 获赞 53 经验 596 为了本站的长期运营 请将我们的网站加入广告拦截器的白名单 感谢您的支持 万维 广告 随便看看 万物皆空之 JavaScript 原型 黑夜尽头 844 2 编写一个简单的JavaScript模板引擎 FX 692 2 说说对React中类组件和函数组件的理解 有什么区别 动感超人 531 0 老大让我优化数据库 我上来就分库分表 他过来就是一jio 孤音 393 1 再也不用手动改package.json的版本号 蔡文姬 230 0 2023 年前端工程化都在谈些什么 契机 思考 历史 前端工程化 评审 准备开发 开发阶段 发布交付 上线 技术卷技术 具有普遍性 技术卷业务 升职加薪 如何提高前端工程化能力 总结 评论 网上有害信息举报专区 | 浙ICP备2021032878号-1 | 关于我们 ","lang":null,"canonicalUrl":"https://www.developers.pub/article/1135520","description":null,"urlTerms":["article"],"titleTerms":["2023","年","前","端","工","程","化","都","在","谈","些","什","么","开","发","者","客","栈","帮","助","面","试","的","平","台","顽","强","网","络"]}},{"timestamp":1702266222141,"collection":"pageListEntries","objectPk":[20201014,"developers.pub/article/1135520"],"operation":"update","object":{"listId":20201014,"pageUrl":"developers.pub/article/1135520","fullUrl":"https://www.developers.pub/article/1135520","createdAt":"2023-12-07T10:09:00.247Z"}},{"timestamp":1702266222173,"collection":"visits","objectPk":[1701943740276,"developers.pub/article/1135520"],"operation":"update","object":{"url":"developers.pub/article/1135520","time":1701943740276,"duration":null,"scrollMaxPx":null,"scrollMaxPerc":null,"scrollPerc":null,"scrollPx":null}},{"timestamp":1702266222752,"collection":"pages","objectPk":"juejin.cn/post/7206950454097510456","operation":"update","object":{"url":"juejin.cn/post/7206950454097510456","fullUrl":"https://juejin.cn/post/7206950454097510456","domain":"juejin.cn","hostname":"juejin.cn","fullTitle":"使用Turborepo搭建一个自动化发布的React组件库｜记录踩坑事项 - 掘金","text":" 首页 首页 沸点 课程 直播 活动 竞赛 商城 APP 插件 搜索历史 清空 rspack veev next 企业级后台系统 nanfeiyan 跨窗口通信 intl formatnumber 创作者中心 写文章 发沸点 写笔记 写代码 草稿箱 创作灵感 查看更多 会员 19 评论 赞和收藏 新增粉丝 私信 系统通知 19 使用Turborepo搭建一个自动化发布的React组件库 记录踩坑事项 hutao 2023-03-05 2,836 阅读6分钟 专栏 React专栏 关注 前言 本篇文章将用于记录搭建组件库的整个过程 以及记录我的踩坑事项。 为什么要使用 Turborepo 来搭建组件库 组件库功能介绍 初始化组件工程 发布 npm 包 总结 为什么要使用 Turborepo 来搭建组件库 Turborepo 于 2021 年 12 月出世 是一个针对 JavaScript 和 TypeScript 代码库优化的智能 构建系统。它倡导使用 monorepo 的方式来管理你的工程 具体介绍可以去看看 官方文档 官方文档上很详细 社区上也可以不少关于介绍它的文章。 Turborepo 其中提供了一个创建组件库的 模板工程 本篇文章主要就讲解用这个模板工程来创建自己的组件库的过程 模板工程的 Readme 上也有使用说明 不过不是很完善 很多没有说清楚 会踩不少坑。 至于为何要使用 monorepo 的模式来管理组件库 主要是为了以后更好拆分内容 又能使用公共代码 比如说 PC 和 Mobile 的组件需要区分 公共的工具方法也可以在组件之间共用 其实核心就是简化代码、更有效的管理代码。 组件库功能介绍 模版本身就提供了以下功能 构建管理工具 Turborepo 支持组件库类型 React 支持 TypeScript : 使用 Tsup 来进行编译 组件文档方案 Storybook Eslint 代码检查 Prettier 代码格式化 Changesets 管理版本控制和版本日志 使用 Github Actions 自动发包 后续再补充添加测试工具 和 commit 规范的过程。 初始化组件工程 直接使用以下命令克隆模板 然后进入新建的目录 并使用 vscode 打开工程 bash 复制代码 npx degit vercel/turbo/examples/design-system 你的仓库名称 cd 你的仓库名称 code . 打开 vscode 后全局替换掉 acme 字段 我使用的是 cushily 这个需要唯一 可以去 npm 新建一个组织。 并且修改 packages/* 文件加上的 acme 字段 再进行安装依赖和初始化 git bash 复制代码 pnpm install git init . && git add . && git commit -m \"Init\" 然后在 github 新建仓库 再使用 remote 命令关联你的仓库即可 bash 复制代码 git remote add origin git@github.com:用户名/仓库名.git 然后运行 pnpm dev 就可以开始进行组件开发了 也会自动打开 storybook 页面 当你修改组件时 将会自动更新。 storybook 页面如下 storybook 既可以用于自测组件 又可以编写组件文档 还是挺好用的。 目录结构说明 tree 复制代码 . .changeset 管理版本控制和版本日志 README.md config.json .eslintrc.js .github 已默认添加了 Github Actions 配置 workflows .gitignore .npmrc apps docs 组件文档 接入了storybook meta.json 这个没看到有啥用 可以不用管 package.json packages cushily-core UI组件库 cushily-tsconfig ts配置 cushily-utils 工具库 eslint-config-cushily eslint配置 pnpm-lock.yaml pnpm-workspace.yaml 配置包目录 turbo.json turbo 配置文件 发布 npm 包 修改包管理工具 前面步骤完成后 我们就可以把工程给推送到 Github 上了 这时候会自动触发 Github Actions 不过这时候会报错 依赖安装失败 我们看一下 Github Actions 配置 配置中使用的是 yarn 安装依赖 我们本地使用的是 pnpm 改成 pnpm 即可 不清楚是不是 Turborepo 都使用的 pnpm 没有去测试 yarn 打开仓库的 actions 权限配置 没开打之前提交代码到远程仓库后 自动触发 action 构建会报错 如图所示。 可以看出构建都成功了 但是在最后推送 tags 时报错了 是因为仓库默认的 Actions 没有推送权限 按照下图打开即可 修改变量和关联npm账号 Github Actions 配置有几个变量需要注意一下 GITHUB_TOKEN 这个变量不用管 GitHub Actions 会自己生成注入 GITHUB_REPOSITORY 这个变量直接去掉 换成你的仓库名即可 NPM_TOKEN 这个需要去 npm 获取一个 Access Token 然后配置搭到 Github 仓库。 NPM_TOKEN 设置过程如下 先去 npm 登录账号 然后进入 Access Tokens 页面 页面右侧有新增按钮 打开选择第二个即可 在新增页面不用写名称 类型选择 Automation 。 新增成功后复制一下 然后到 GitHub 仓库 进入设置页 进行设置 我就是设置成上面的一直没生效 后面尝试下面的才可以了 。 changesets 配置调整 changeset 默认是 master 现在 github仓 库默认是 main 分支 因此需要改一下 .changeset/config.json json 复制代码 { // 添加 changeset 分支说明 否则运行 changeset 会报错 \"baseBranch\" : \"main\" } 首次发布 配置内容都已经就绪 现在把改动的代码提交到远端 就可以触发 action 自动构建发布了。然后可以看到包都发到了 npm 上去了。 发布新版本 下面我们修改一下 packages/cushily-core/src/Button.tsx 组件代码 并提交。 diff 复制代码 - export interface ButtonProps { + export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> { children: React.ReactNode; } - export function Button(props: ButtonProps) { - return <button>{props.children}</button>; + export function Button({ children, ...rest }: ButtonProps) { + return <button {...rest}>{children}</button>; } 这时候会触发 action 执行成功 但是不会发布新版本。 我们还需要分别执行以下操作 pnpm changeset 选择需要发布的包 pnpm version 修改版本 pnpm install 版本更新后需要重新安装依赖来更新修改 lock 文件 否则会导致 action 构建失败。 这就是忘了重新 pnpm install 的后果 不过可以修改一下配置文件 把 pnpm install 改成 pnpm install --no-frozen-lockfile 这样本地可以少执行一个发包动作。 然后我们再把本地提交推送到远端后 这时候action就可以正常构建了 我们可以在 Github 仓库看到发布的版本 npm 上也更新了 总结 本篇文章从介绍 Turborepo 到使用官方提供的模板搭建了一个 React 组件库 然后再把它发到了 npm 上去 中间其实还遇到了不少问题 不过总算都解决了。 有个感想 带着写文章的想法去学习 真的很有动力 相当于立了一个超短期的 flag 然后就要通过自己去学习研究才能实现这个 flag 而且中间有意识的去记录每一个可能遇到的问题点。 最后再说一下我对这个组件模板的看法吧 整个体系来说我觉得挺好的 但是不太喜欢 changeset 的版本控制 更喜欢 lerna 的版本控制 可以自动判断哪些包需要发包 当然可能我对它了解太少了 后面再花时间去多了解一下。 最后附上组件工程地址 cushily-design 欢迎 大家关注 点赞 收藏 支持一下 有问题欢迎评论区提出 感谢纠错 开启掘金成长之旅 这是我参与「掘金日新计划 · 2 月更文挑战」的第 30 天 点击查看活动详情 标签 JavaScript 前端 掘金·日新计划 本文收录于以下专栏 React专栏 专栏目录 用于分享React的原理、发展历程 以及实际运用 8 订阅 · 6 篇文章 订阅 上一篇 React实践 实现一个倒计时hook组件 评论 9 0 / 1000 标点符号、链接等不计算在有效字数内 + Enter 发送 最热 最新 武小郎烧饼 前端小菜鸟 @上海不知名公司 如果公共的依赖是不是直接安装在根目录下就好了呀 6月前 点赞 2 屏蔽作者 武小郎烧饼 举报 hutao 作者 : 是的 开发依赖完全可以 生产依赖还是需要在对应的包里面添加依赖 6月前 点赞 回复 屏蔽作者 hutao 举报 武小郎烧饼 回复 hutao 作者 : 好滴 谢谢大佬 6月前 点赞 回复 屏蔽作者 武小郎烧饼 举报 天星烛 @完美 - uses: pnpm/action-setup@v2 with: version: 7 run_install: false 这段antion 是干啥的? 6月前 点赞 评论 屏蔽作者 天星烛 举报 天星烛 @完美 很好啊 6月前 点赞 1 屏蔽作者 天星烛 举报 hutao 作者 : 6月前 点赞 回复 屏蔽作者 hutao 举报 查看全部 9 条评论 33 9 收藏 加个关注 精彩更新不错过~ 关注 hutao 公众号 @前端分享乐 榜上有名 53 文章 116k 阅读 268 粉丝 加个关注 精彩更新不错过~ 关注 已关注 私信 目录 收起 前言 为什么要使用 Turborepo 来搭建组件库 组件库功能介绍 初始化组件工程 发布 npm 包 修改包管理工具 打开仓库的 actions 权限配置 修改变量和关联npm账号 changesets 配置调整 首次发布 发布新版本 总结 搜索建议 Turborepo开车上路 Pnpm Monorepo 和 Turborepo 从 Turborepo 看 Monorepo 工具的任务编排能力 使用Turborepo搭建一个自动化发布的React组件库 [前端工程化]turborepo细节 Monorepo 入门(keng)指南 Turborepo 发布当月就激增 3.8k Star 这款超神的新兴 Monorepo 方案 你不打算尝试下吗 turbo介绍 翻译 Turborepo 介绍 [翻译中]面向未来的前端构建工具、npm/yarn/pnpm 的继任者 (Turbo) Turborepo 精选内容 图形遍历效率低 试试 R 树 前端西瓜哥 · 140阅读 · 5点赞 统计项目代码行数轻松搞定 使用 Node.js 脚本自动统计代码量 JYeontu · 183阅读 · 3点赞 从 crypto-js 了解加密-解密知识点 进二开物 · 302阅读 · 4点赞 封装一个工作日历组件 顺便复习一下Date常用方法 前端小付 · 1.4k阅读 · 23点赞 用第三方拖拽库快速撸一个可视化搭建平台 徐小夕 · 2.3k阅读 · 9点赞 找对属于你的技术圈子 回复「进群」加入官方微信群 为你推荐 使用Turborepo搭建一个自动化发布的React组件库 使用Turborepo搭建一个自动化发布的React组件库 前言 本篇文章将用于记录搭建组件库的整个过程 以及记录我的踩坑事项。 为什么要使用 Turborepo 来搭建组件库 组件库功能介绍 初始 致 4月前 769 2 评论 前端 译 创建 React 组件库流程 作为一个开发者能够创建组件库是很棒的事情 如果你不知道如何开始 让我指导下。 事先声明 我不是一个组件库开发专家 以下只是我先前搭建组件库的一些经验。 前置条件 在你开始之前 需要知道 React ziolau 1年前 307 2 评论 前端 React.js 完结篇 一步一步实现一个专业的前端组件库 组件库完结篇 附带线上演示 捣鼓了半个月 终于像点样子了。从架构设计、组件开发到文档建设 整个组件库的0-1过程笔者通过文章的方式进行记录、分享 有兴趣的朋友赶紧动起手来 搞一个属于自己的组件库吧 井柏然 1年前 9.8k 153 37 前端 开源 JavaScript 组件库实战 BEM 命名规范 哈喽大家好 好久没写组件库的文章了。之前搞完初版的组件库后搁置了一段时间 最近有资源投入 趁机会继续完善组件库建设 加个 BEM 规范 接下来有时间的话会完善组件库的单元测试 到时候还会再写一篇文章 井柏然 10月前 5.3k 71 15 前端 CSS 代码规范 React组件库搭建流程 三 -- git规范及npm 发布 前两篇文章介绍了组件库的搭建、自测、代码规范的流程步骤 可以说整个组件库的基础框架已经完成。由于后期可能会是多人协作开发 所以需要commit规范。以及我们如何发布到npm上。 昼久 2年前 212 2 评论 前端 React.js 手把手 如何搭建一个通用组件库 文档+样式+按需打包 文档+样式+按需打包 一个通用的组件库基本算是搭建完成了 也能发布上线使用了。但是要真正封装出一个好用的ui组件库 还是有很多细节需要实现。比如.... Mr_绍君 7月前 2.0k 36 7 前端 Element Vue.js 从零到一搭建一个完整React组件库 将从0到1搭建一个包括 文档、 自动化部署、 单元测试、 开发环境、十分全面的组件库开发模板 提供Cli直接拉取 宇cccc 1年前 2.2k 26 评论 React.js Vue3+Typescript 搭建PC端组件库 本项目技术栈为vue3+typescript PC端组件库。 项目gitee地址 本文将从环境搭建开始 一步步完成组件库的打包工作。组件库内组件不定期更新。 1. 代码管理方式 组件库采用monorepo的代码管理方式。 monorepo 是管理项目代码的一种方式 指在一个项目… 小天师 2年前 3.2k 6 5 Vue.js 从0到1实现 vue3 + pnpm + ant-design-vue 二次封装组件库 应用于管理系统 vue3 + ant-design-vue 的组件库 对 ant-design-vue 进行二次封装 统一代码格式校验以及提交规范 组件库不打包 直接发布源码到私有仓库 熬夜佩奇 6月前 1.1k 18 1 代码规范 前端 如何快速构建React组件库 目前团队内已经有较为成熟的 Vue 技术栈的 NutUI 组件库[1] 和 React 技术栈的 yep-react 组件库[2]。然而这些组件库大都从零开始搭建 包括 Webpack 的繁杂配置 Markdown 文件转 Vue 文件功能的开发 单元测试功能的开发、按需加载的… 京东设计中心JDC 3年前 4.6k 58 1 React.js 使用vitepress从0搭建自己的组件库文档 vitepress搭建组件库文档 项目准备 以下是我的环境版本 nodejs v16.13.0 npm v8.1.0 项目创建 首先新建文件夹vitepress-demo 然后进入到创建好的目录cd _WQ_ 1年前 3.9k 35 11 前端 Vue.js React组件库搭建流程 一 -- 开发调试 本文主旨是让同学们能快速的搭建起组件库的基础平台 包括文档、部署站点等。站点是基于[dumi](https://d.umijs.org/zh-CN)生成 有兴趣的同学可以深入学习。 昼久 2年前 975 2 评论 前端 React.js 使用dumi搭建组件库 以前本想用storybook搭建一个组件库 后来通过公司的一位前辈了解到 通过dumi搭建更加方便 因此学习一下。 通过本篇文章 可以大概了解到的内容有 dumi创建组件库 lerna管理多个包 pr 码农不会背八股 1年前 8.2k 65 19 前端 webpack+react 搭建简易npm包 前言 大家好 我是Jade。这也是我第一次写文章 也是想记录一下这个过程 我相信还有很多小伙伴还没有接触过或者自己从0到1搭建过npm组件 所以我就想记录一下我的搭建过程 Jay丶 1年前 1.4k 18 5 前端 基于dumi搭建组件库 前言 如果你想使用 dumi2.0 搭建组件库时 可以仔细阅读本文。本文主要记录一些在搭建组件库的详细过程以及遇到的坑。 背景 由于团队缺少一个能够通用的中后台业务组件库 由于项目中通用的组件 在开发 南墨 5月前 1.2k 12 评论 前端 React.js 前端框架 加个关注 精彩更新不错过~ 关注 收藏成功 已添加到「」 点击更改 微信 微信扫码分享 新浪微博 QQ 下载APP 下载APP 微信扫一扫 微信公众号 新浪微博 VIP.5 如鱼得水 选择你感兴趣的技术方向 后端 前端 Android iOS 人工智能 开发工具 代码人生 阅读 跳过 上一步 至少选择1个分类 温馨提示 当前操作失败 如有疑问 可点击申诉 前往申诉 我知道了 确定屏蔽该用户 屏蔽后 对方将不能关注你、与你产生任何互动 无法查看你的主页 取消 确定 沉浸阅读 VIP.5 如鱼得水 VIP.5 如鱼得水 ","lang":null,"canonicalUrl":"https://juejin.cn/post/7206950454097510456","description":null,"urlTerms":["post"],"titleTerms":["使","用","turborepo","搭","建","一","个","自","动","化","发","布","的","react","组","件","库","｜","记","录","踩","坑","事","项","掘","金"]}},{"timestamp":1702266224037,"collection":"favIcons","objectPk":"juejin.cn","operation":"update","object":{"hostname":"juejin.cn","favIcon":"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAMAAABEpIrGAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAByFBMVEUAAAAegP8fgP8egf8eev8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP8egP////9x6/jYAAAAlnRSTlMAAAAAAAZdWwUQhvTzhA8lq/ypJHH5C3PsBAJO2dghl2AqYZg7yBGIe/itJq96CGrozkMBRdDnaQwDaAfPN7ZwCfaUlnK3OGPeGP4Z8rww4+JeMr3xWt/aUjzHU9tYw+55IKSiHw3vwjYdn/qhCh6eHHfEOsbtdVDg4ddPL7qDhbkuF/cjrJMWbOnR0mtGKLD9JxKK9Ym9ME1eAAAAAWJLR0SX5m4brwAAAAd0SU1FB+UGEgMGHcgXPyMAAAHTSURBVDjLrVNpV1JRFH1bk55AISFPAVEQQXEgFTWQVDBDUsws5yErc8rU5tGZyjFNsvt7PfcBLizAtVqeD3fdu+9+5+6z3zmCcMkBioz3OYqrIjJ8nqtUqa9dT5cE0ORpGdPe0KVhAPl6RqHPT0uQCgoZKyyQUhAAgxECjKYis0neGM6TgOISC8kHrFa6gVhqK05mAGV2plY6YhjgKFcxe1kSA8YKJ8mv1HAMqKqmYpw1xuQUrpu1pL+u3g24Gxpp23TLhUR6j5dejcPNPp9MvU1UAQYPF9TS2uZHInGg/U4g8Rj8HXeDEDpDzFlyj/8kLo11dbGYXKDb5mShTqE8TGjPfbk4Sy938kGfXPDDR8TtVwriwCCBQ8NcCEbsjI3y+uAdGyc4NCEKyGp5TNvJJx5kA0+fTT3n6acrZgicnYvVPf9igbGFl/P8Rlrk69IUIfrlV3GvIL2eJP6b4JW4k2/f0fH9B+nMKXg/mgn6JHcTRMVnOnz5es5JrKyS5vBaLnXVuprq2tj8+3dutUfIobxvuu/kV+TH9j89AdfOLmXe26el9sCVoqfg/rnH5GhscKfsOeDw6Bc9U32cvq2jv09Uf6IZZocGR5GTebQuGL3/iVNGTHdSXGp/KgAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMS0wNi0xOFQwMzowNjoyOSswMDowMBW0AwoAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjEtMDYtMThUMDM6MDY6MjkrMDA6MDBk6bu2AAAAV3pUWHRSYXcgcHJvZmlsZSB0eXBlIGlwdGMAAHic4/IMCHFWKCjKT8vMSeVSAAMjCy5jCxMjE0uTFAMTIESANMNkAyOzVCDL2NTIxMzEHMQHy4BIoEouAOoXEXTyQjWVAAAAAElFTkSuQmCC"}},{"timestamp":1702266225604,"collection":"pages","objectPk":"juejin.cn/post/7206950454097510456","operation":"update","object":{"url":"juejin.cn/post/7206950454097510456","fullUrl":"https://juejin.cn/post/7206950454097510456","domain":"juejin.cn","hostname":"juejin.cn","fullTitle":"使用Turborepo搭建一个自动化发布的React组件库｜记录踩坑事项 - 掘金","text":" 首页 首页 沸点 课程 直播 活动 竞赛 商城 APP 插件 搜索历史 清空 rspack veev next 企业级后台系统 nanfeiyan 跨窗口通信 intl formatnumber 创作者中心 写文章 发沸点 写笔记 写代码 草稿箱 创作灵感 查看更多 会员 19 评论 赞和收藏 新增粉丝 私信 系统通知 19 使用Turborepo搭建一个自动化发布的React组件库 记录踩坑事项 hutao 2023-03-05 2,836 阅读6分钟 专栏 React专栏 关注 前言 本篇文章将用于记录搭建组件库的整个过程 以及记录我的踩坑事项。 为什么要使用 Turborepo 来搭建组件库 组件库功能介绍 初始化组件工程 发布 npm 包 总结 为什么要使用 Turborepo 来搭建组件库 Turborepo 于 2021 年 12 月出世 是一个针对 JavaScript 和 TypeScript 代码库优化的智能 构建系统。它倡导使用 monorepo 的方式来管理你的工程 具体介绍可以去看看 官方文档 官方文档上很详细 社区上也可以不少关于介绍它的文章。 Turborepo 其中提供了一个创建组件库的 模板工程 本篇文章主要就讲解用这个模板工程来创建自己的组件库的过程 模板工程的 Readme 上也有使用说明 不过不是很完善 很多没有说清楚 会踩不少坑。 至于为何要使用 monorepo 的模式来管理组件库 主要是为了以后更好拆分内容 又能使用公共代码 比如说 PC 和 Mobile 的组件需要区分 公共的工具方法也可以在组件之间共用 其实核心就是简化代码、更有效的管理代码。 组件库功能介绍 模版本身就提供了以下功能 构建管理工具 Turborepo 支持组件库类型 React 支持 TypeScript : 使用 Tsup 来进行编译 组件文档方案 Storybook Eslint 代码检查 Prettier 代码格式化 Changesets 管理版本控制和版本日志 使用 Github Actions 自动发包 后续再补充添加测试工具 和 commit 规范的过程。 初始化组件工程 直接使用以下命令克隆模板 然后进入新建的目录 并使用 vscode 打开工程 bash 复制代码 npx degit vercel/turbo/examples/design-system 你的仓库名称 cd 你的仓库名称 code . 打开 vscode 后全局替换掉 acme 字段 我使用的是 cushily 这个需要唯一 可以去 npm 新建一个组织。 并且修改 packages/* 文件加上的 acme 字段 再进行安装依赖和初始化 git bash 复制代码 pnpm install git init . && git add . && git commit -m \"Init\" 然后在 github 新建仓库 再使用 remote 命令关联你的仓库即可 bash 复制代码 git remote add origin git@github.com:用户名/仓库名.git 然后运行 pnpm dev 就可以开始进行组件开发了 也会自动打开 storybook 页面 当你修改组件时 将会自动更新。 storybook 页面如下 storybook 既可以用于自测组件 又可以编写组件文档 还是挺好用的。 目录结构说明 tree 复制代码 . .changeset 管理版本控制和版本日志 README.md config.json .eslintrc.js .github 已默认添加了 Github Actions 配置 workflows .gitignore .npmrc apps docs 组件文档 接入了storybook meta.json 这个没看到有啥用 可以不用管 package.json packages cushily-core UI组件库 cushily-tsconfig ts配置 cushily-utils 工具库 eslint-config-cushily eslint配置 pnpm-lock.yaml pnpm-workspace.yaml 配置包目录 turbo.json turbo 配置文件 发布 npm 包 修改包管理工具 前面步骤完成后 我们就可以把工程给推送到 Github 上了 这时候会自动触发 Github Actions 不过这时候会报错 依赖安装失败 我们看一下 Github Actions 配置 配置中使用的是 yarn 安装依赖 我们本地使用的是 pnpm 改成 pnpm 即可 不清楚是不是 Turborepo 都使用的 pnpm 没有去测试 yarn 打开仓库的 actions 权限配置 没开打之前提交代码到远程仓库后 自动触发 action 构建会报错 如图所示。 可以看出构建都成功了 但是在最后推送 tags 时报错了 是因为仓库默认的 Actions 没有推送权限 按照下图打开即可 修改变量和关联npm账号 Github Actions 配置有几个变量需要注意一下 GITHUB_TOKEN 这个变量不用管 GitHub Actions 会自己生成注入 GITHUB_REPOSITORY 这个变量直接去掉 换成你的仓库名即可 NPM_TOKEN 这个需要去 npm 获取一个 Access Token 然后配置搭到 Github 仓库。 NPM_TOKEN 设置过程如下 先去 npm 登录账号 然后进入 Access Tokens 页面 页面右侧有新增按钮 打开选择第二个即可 在新增页面不用写名称 类型选择 Automation 。 新增成功后复制一下 然后到 GitHub 仓库 进入设置页 进行设置 我就是设置成上面的一直没生效 后面尝试下面的才可以了 。 changesets 配置调整 changeset 默认是 master 现在 github仓 库默认是 main 分支 因此需要改一下 .changeset/config.json json 复制代码 { // 添加 changeset 分支说明 否则运行 changeset 会报错 \"baseBranch\" : \"main\" } 首次发布 配置内容都已经就绪 现在把改动的代码提交到远端 就可以触发 action 自动构建发布了。然后可以看到包都发到了 npm 上去了。 发布新版本 下面我们修改一下 packages/cushily-core/src/Button.tsx 组件代码 并提交。 diff 复制代码 - export interface ButtonProps { + export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> { children: React.ReactNode; } - export function Button(props: ButtonProps) { - return <button>{props.children}</button>; + export function Button({ children, ...rest }: ButtonProps) { + return <button {...rest}>{children}</button>; } 这时候会触发 action 执行成功 但是不会发布新版本。 我们还需要分别执行以下操作 pnpm changeset 选择需要发布的包 pnpm version 修改版本 pnpm install 版本更新后需要重新安装依赖来更新修改 lock 文件 否则会导致 action 构建失败。 这就是忘了重新 pnpm install 的后果 不过可以修改一下配置文件 把 pnpm install 改成 pnpm install --no-frozen-lockfile 这样本地可以少执行一个发包动作。 然后我们再把本地提交推送到远端后 这时候action就可以正常构建了 我们可以在 Github 仓库看到发布的版本 npm 上也更新了 总结 本篇文章从介绍 Turborepo 到使用官方提供的模板搭建了一个 React 组件库 然后再把它发到了 npm 上去 中间其实还遇到了不少问题 不过总算都解决了。 有个感想 带着写文章的想法去学习 真的很有动力 相当于立了一个超短期的 flag 然后就要通过自己去学习研究才能实现这个 flag 而且中间有意识的去记录每一个可能遇到的问题点。 最后再说一下我对这个组件模板的看法吧 整个体系来说我觉得挺好的 但是不太喜欢 changeset 的版本控制 更喜欢 lerna 的版本控制 可以自动判断哪些包需要发包 当然可能我对它了解太少了 后面再花时间去多了解一下。 最后附上组件工程地址 cushily-design 欢迎 大家关注 点赞 收藏 支持一下 有问题欢迎评论区提出 感谢纠错 开启掘金成长之旅 这是我参与「掘金日新计划 · 2 月更文挑战」的第 30 天 点击查看活动详情 标签 JavaScript 前端 掘金·日新计划 本文收录于以下专栏 React专栏 专栏目录 用于分享React的原理、发展历程 以及实际运用 8 订阅 · 6 篇文章 订阅 上一篇 React实践 实现一个倒计时hook组件 评论 9 0 / 1000 标点符号、链接等不计算在有效字数内 + Enter 发送 最热 最新 武小郎烧饼 前端小菜鸟 @上海不知名公司 如果公共的依赖是不是直接安装在根目录下就好了呀 6月前 点赞 2 屏蔽作者 武小郎烧饼 举报 hutao 作者 : 是的 开发依赖完全可以 生产依赖还是需要在对应的包里面添加依赖 6月前 点赞 回复 屏蔽作者 hutao 举报 武小郎烧饼 回复 hutao 作者 : 好滴 谢谢大佬 6月前 点赞 回复 屏蔽作者 武小郎烧饼 举报 天星烛 @完美 - uses: pnpm/action-setup@v2 with: version: 7 run_install: false 这段antion 是干啥的? 6月前 点赞 评论 屏蔽作者 天星烛 举报 天星烛 @完美 很好啊 6月前 点赞 1 屏蔽作者 天星烛 举报 hutao 作者 : 6月前 点赞 回复 屏蔽作者 hutao 举报 查看全部 9 条评论 33 9 收藏 加个关注 精彩更新不错过~ 关注 hutao 公众号 @前端分享乐 榜上有名 53 文章 116k 阅读 268 粉丝 加个关注 精彩更新不错过~ 关注 已关注 私信 目录 收起 前言 为什么要使用 Turborepo 来搭建组件库 组件库功能介绍 初始化组件工程 发布 npm 包 修改包管理工具 打开仓库的 actions 权限配置 修改变量和关联npm账号 changesets 配置调整 首次发布 发布新版本 总结 搜索建议 Turborepo开车上路 Pnpm Monorepo 和 Turborepo 从 Turborepo 看 Monorepo 工具的任务编排能力 使用Turborepo搭建一个自动化发布的React组件库 [前端工程化]turborepo细节 Monorepo 入门(keng)指南 Turborepo 发布当月就激增 3.8k Star 这款超神的新兴 Monorepo 方案 你不打算尝试下吗 turbo介绍 翻译 Turborepo 介绍 [翻译中]面向未来的前端构建工具、npm/yarn/pnpm 的继任者 (Turbo) Turborepo 精选内容 图形遍历效率低 试试 R 树 前端西瓜哥 · 140阅读 · 5点赞 统计项目代码行数轻松搞定 使用 Node.js 脚本自动统计代码量 JYeontu · 183阅读 · 3点赞 从 crypto-js 了解加密-解密知识点 进二开物 · 302阅读 · 4点赞 封装一个工作日历组件 顺便复习一下Date常用方法 前端小付 · 1.4k阅读 · 23点赞 用第三方拖拽库快速撸一个可视化搭建平台 徐小夕 · 2.3k阅读 · 9点赞 找对属于你的技术圈子 回复「进群」加入官方微信群 为你推荐 使用Turborepo搭建一个自动化发布的React组件库 使用Turborepo搭建一个自动化发布的React组件库 前言 本篇文章将用于记录搭建组件库的整个过程 以及记录我的踩坑事项。 为什么要使用 Turborepo 来搭建组件库 组件库功能介绍 初始 致 4月前 769 2 评论 前端 译 创建 React 组件库流程 作为一个开发者能够创建组件库是很棒的事情 如果你不知道如何开始 让我指导下。 事先声明 我不是一个组件库开发专家 以下只是我先前搭建组件库的一些经验。 前置条件 在你开始之前 需要知道 React ziolau 1年前 307 2 评论 前端 React.js 完结篇 一步一步实现一个专业的前端组件库 组件库完结篇 附带线上演示 捣鼓了半个月 终于像点样子了。从架构设计、组件开发到文档建设 整个组件库的0-1过程笔者通过文章的方式进行记录、分享 有兴趣的朋友赶紧动起手来 搞一个属于自己的组件库吧 井柏然 1年前 9.8k 153 37 前端 开源 JavaScript 组件库实战 BEM 命名规范 哈喽大家好 好久没写组件库的文章了。之前搞完初版的组件库后搁置了一段时间 最近有资源投入 趁机会继续完善组件库建设 加个 BEM 规范 接下来有时间的话会完善组件库的单元测试 到时候还会再写一篇文章 井柏然 10月前 5.3k 71 15 前端 CSS 代码规范 React组件库搭建流程 三 -- git规范及npm 发布 前两篇文章介绍了组件库的搭建、自测、代码规范的流程步骤 可以说整个组件库的基础框架已经完成。由于后期可能会是多人协作开发 所以需要commit规范。以及我们如何发布到npm上。 昼久 2年前 212 2 评论 前端 React.js 手把手 如何搭建一个通用组件库 文档+样式+按需打包 文档+样式+按需打包 一个通用的组件库基本算是搭建完成了 也能发布上线使用了。但是要真正封装出一个好用的ui组件库 还是有很多细节需要实现。比如.... Mr_绍君 7月前 2.0k 36 7 前端 Element Vue.js 从零到一搭建一个完整React组件库 将从0到1搭建一个包括 文档、 自动化部署、 单元测试、 开发环境、十分全面的组件库开发模板 提供Cli直接拉取 宇cccc 1年前 2.2k 26 评论 React.js Vue3+Typescript 搭建PC端组件库 本项目技术栈为vue3+typescript PC端组件库。 项目gitee地址 本文将从环境搭建开始 一步步完成组件库的打包工作。组件库内组件不定期更新。 1. 代码管理方式 组件库采用monorepo的代码管理方式。 monorepo 是管理项目代码的一种方式 指在一个项目… 小天师 2年前 3.2k 6 5 Vue.js 从0到1实现 vue3 + pnpm + ant-design-vue 二次封装组件库 应用于管理系统 vue3 + ant-design-vue 的组件库 对 ant-design-vue 进行二次封装 统一代码格式校验以及提交规范 组件库不打包 直接发布源码到私有仓库 熬夜佩奇 6月前 1.1k 18 1 代码规范 前端 如何快速构建React组件库 目前团队内已经有较为成熟的 Vue 技术栈的 NutUI 组件库[1] 和 React 技术栈的 yep-react 组件库[2]。然而这些组件库大都从零开始搭建 包括 Webpack 的繁杂配置 Markdown 文件转 Vue 文件功能的开发 单元测试功能的开发、按需加载的… 京东设计中心JDC 3年前 4.6k 58 1 React.js 使用vitepress从0搭建自己的组件库文档 vitepress搭建组件库文档 项目准备 以下是我的环境版本 nodejs v16.13.0 npm v8.1.0 项目创建 首先新建文件夹vitepress-demo 然后进入到创建好的目录cd _WQ_ 1年前 3.9k 35 11 前端 Vue.js React组件库搭建流程 一 -- 开发调试 本文主旨是让同学们能快速的搭建起组件库的基础平台 包括文档、部署站点等。站点是基于[dumi](https://d.umijs.org/zh-CN)生成 有兴趣的同学可以深入学习。 昼久 2年前 975 2 评论 前端 React.js 使用dumi搭建组件库 以前本想用storybook搭建一个组件库 后来通过公司的一位前辈了解到 通过dumi搭建更加方便 因此学习一下。 通过本篇文章 可以大概了解到的内容有 dumi创建组件库 lerna管理多个包 pr 码农不会背八股 1年前 8.2k 65 19 前端 webpack+react 搭建简易npm包 前言 大家好 我是Jade。这也是我第一次写文章 也是想记录一下这个过程 我相信还有很多小伙伴还没有接触过或者自己从0到1搭建过npm组件 所以我就想记录一下我的搭建过程 Jay丶 1年前 1.4k 18 5 前端 基于dumi搭建组件库 前言 如果你想使用 dumi2.0 搭建组件库时 可以仔细阅读本文。本文主要记录一些在搭建组件库的详细过程以及遇到的坑。 背景 由于团队缺少一个能够通用的中后台业务组件库 由于项目中通用的组件 在开发 南墨 5月前 1.2k 12 评论 前端 React.js 前端框架 加个关注 精彩更新不错过~ 关注 收藏成功 已添加到「」 点击更改 微信 微信扫码分享 新浪微博 QQ 下载APP 下载APP 微信扫一扫 微信公众号 新浪微博 VIP.5 如鱼得水 选择你感兴趣的技术方向 后端 前端 Android iOS 人工智能 开发工具 代码人生 阅读 跳过 上一步 至少选择1个分类 温馨提示 当前操作失败 如有疑问 可点击申诉 前往申诉 我知道了 确定屏蔽该用户 屏蔽后 对方将不能关注你、与你产生任何互动 无法查看你的主页 取消 确定 沉浸阅读 VIP.5 如鱼得水 VIP.5 如鱼得水 ","lang":null,"canonicalUrl":"https://juejin.cn/post/7206950454097510456","description":null,"urlTerms":["post"],"titleTerms":["使","用","turborepo","搭","建","一","个","自","动","化","发","布","的","react","组","件","库","｜","记","录","踩","坑","事","项","掘","金"]}},{"timestamp":1702266225627,"collection":"pageListEntries","objectPk":[20201014,"juejin.cn/post/7206950454097510456"],"operation":"update","object":{"listId":20201014,"pageUrl":"juejin.cn/post/7206950454097510456","fullUrl":"https://juejin.cn/post/7206950454097510456","createdAt":"2023-12-07T10:18:18.516Z"}},{"timestamp":1702266225654,"collection":"visits","objectPk":[1701944298548,"juejin.cn/post/7206950454097510456"],"operation":"update","object":{"url":"juejin.cn/post/7206950454097510456","time":1701944298548,"duration":null,"scrollMaxPx":null,"scrollMaxPerc":null,"scrollPerc":null,"scrollPx":null}},{"timestamp":1702266226540,"collection":"pages","objectPk":"modernjs.dev/module-tools/guide/faq/build.html","operation":"update","object":{"url":"modernjs.dev/module-tools/guide/faq/build.html","fullUrl":"https://modernjs.dev/module-tools/guide/faq/build.html","domain":"modernjs.dev","hostname":"modernjs.dev","fullTitle":"构建相关问题 - Modern.js Module","text":" Modern.js Module Search Docs K 指南 API 插件 v2.40.0 更新日志 贡献指南 简体中文 English 指南 API 插件 v2.40.0 更新日志 贡献指南 简体中文 English Menu Modern.js Module 介绍 欢迎使用 为什么需要 Modern.js Module 快速开始 基础使用 开始之前 CLI 命令 修改输出产物 使用微生成器 使用 Storybook 测试项目 版本管理与发布 进阶指南 深入理解构建 深入理解 dev 命令 使用 Copy 工具 处理三方依赖 构建 umd 产物 处理静态资源 最佳实践 开发组件 使用 Tailwind CSS 常见问题 构建相关问题 Storybook 相关问题 测试相关问题 构建相关问题 # 产物问题 # Class Fields 的初始化处理 # TypeSript 提供了 useDefineForClassFields 配置用于控制对于 public class fields 的转换处理。 如果有一段代码 class C { foo = 100 ; bar : string ; } 当 useDefineForClassFields 为 false 的时候 则编译后的代码会变为 class C { constructor ( ) { this . foo = 100 ; } } 当 useDefineForClassFields 为 true 的时候 则编译后的代码会变为 class C { constructor ( ) { Object . defineProperty ( this , 'foo' , { enumerable : true , configurable : true , writable : true , value : 100 , } ) ; Object . defineProperty ( this , 'bar' , { enumerable : true , configurable : true , writable : true , value : void 0 , } ) ; } } 同时该配置的默认值会根据 tsconfig.json 的 target 配置而变化 当 target 是 ES2022 或者更高的时候 则 useDefineForClassFields 默认配置为 true 否则就是默认为 false。 关于 TypeScript 这个配置的更多信息 可以参考下面的链接 The useDefineForClassFields Flag and The declare Property Modifier Modern.js Module 目前会根据下面的逻辑进行处理 首先根据当前项目的 tsconfig.json 的 useDefineForClassFields 配置确定在 Modern.js Module 内部如何处理。目前只会读取当前项目路径下的 tsconfig.json 文件的内容 暂时不支持根据 extends 配置来获取最终的 tsconfig 配置。 如果没有检测 tsconfig.json 的 useDefineForClassFields 配置 则会根据 tsconfig.json 的 target 配置来确定默认值。如果 target 大于 ES2022 包含 EsNext 则 useDefineForClassFields默认为 true 否则为 false。 如果没有检测到 tsconfig.json 的 target 则按照 useDefineForClassFields的值 为 true 进行处理。 babel-plugin-lodash 将引入的 lodash 处理成 undefined # 当使用类似下面的方式的时候 会出现这个问题 import * as Lodash from 'lodash' ; export const libs = { _ : Lodash , } ; 目前在 babel-plugin-lodash Github 上的相关 Issue #235 这个问题的解决办法是移除 babel-plugin-lodash 因为此时不需要该插件进行按需引用 使用该插件会产生副作用。 类似的情况在 babel-plugin-import 上也可能会出现。比如有类似如下的代码 import * as Comps from 'components' ; export const libs = { comps : Comps , } ; 此时 babel-plugin-import 也可能会导致 Comps 变为 undefined。因此也需要移除对应的 babel-plugin-import。 异常类问题 # Dynamic require of \\\"react\\\" is not supported # 问题描述 # 当构建的产物配置中产物格式为 ES modules 的时候 export default defineConfig ( { buildConfig : { format : 'esm' , } , } ) ; 如果导入了的第三方 npm 包的 cjs 产物 那么生成的产物可能会在 webpack 下有可能无法正常运行。 解决办法 # 首先需要找到是哪个第三方包引起的问题。例如报错信息中指向了 react 这个包 那么就要寻找在哪个第三方包里存在 require('react') 这样的代码。比如 react-draggable 这个包仅包含 cjs 产物 那么问题定位到 react-draggable 这个包。 然后我们需要将这个包通过下面的配置进行排除 即不打包存在问题的第三方包。 export default defineConfig ( { buildConfig : { externals : [ 'react-draggable' ] , } , } ) ; 参考链接 # When using esbuild with external react I get Dynamic require of \"react\" is not supported 编译过程中 因为某个组件库的 less 文件报错 'Operation on an invalid type' # 可能是因为该组件库依赖的 Less 版本是 v3 而 Modern.js Module 默认是 v4。v3 与 v4 在 math 配置上存在有 Break Change 可以查看这个 链接 了解详情。 因此 如果是在源码中使用了类似这样的组件库 在构建配置中使用了 buildPreset 的情况下 按照下面进行修改 module . exports = { buildPreset ( { extendPreset } ) { return extendPreset ( 'your-build-preset' , { style : { less : { lessOptions : { math : 'always' , } , } , } , } ) ; } , } ; 或者使用了自定义的 buildConfig 的情况下 按照下面进行修改 module . exports = { buildConfig : { style : { less : { lessOptions : { math : 'always' , } , } , } , } , } ; 如果是在 Storybook 中使用了类似这样的组件 则需要修改 Storybook 的调试配置 .storybook/main.ts module . exports = { framework : { options : { builderConfig : { tools : { webpackChain ( chain , { CHAIN_ID } ) { chain . module . rule ( CHAIN_ID . RULE . LESS ) . use ( CHAIN_ID . USE . LESS ) . tap ( options => { options . lessOptions = { ... options . lessOptions , math : 'always' , } ; return options ; } ) ; } , } } } } , } ; Bundle DTS failed # 正常情况下 使用 tsc Modern.js Module 不仅支持输出松散的类型文件产物 同时也支持打包类型文件 可以将这些松散的类型文件以及第三方依赖的类型文件打包成一个文件。 不过 打包第三方依赖的类型文件是存在风险的 因为存在第三方依赖的类型文件无法打包的情况。 因此当遇到 Modern.js Module 构建过程中出现 Bundle DTS failed 的错误信息标题的时候 可以观察报错信息是来自某个第三方依赖。尝试设置 dts.respectExternal 为 false 来关闭打包第三方依赖的类型文件的行为。 defineConfig 函数类型报错 如果没有引用 \"...\" 则无法命名 \"default\" 的推断类型 # 检查项目的 tsconfig.json 文件中是否存在 include 配置 如果没有 则尝试增加下面的内容 { \"include\" : [ \"src\" ] } Bundleless DTS failed # 在不打包的场景下 是直接 tsc 生成类型声明文件。通过终端打印的错误信息 你可以找到问题文件。对于源码文件 推荐将类型问题进行修复 这能够更好地使你的包得到复用。但如果遇到三方包的类型检查问题 开启 skipLibCheck 来跳过三方包的 d.ts 检查。 如果三方包直接导出 ts 文件 skipLibCheck 将会失效 因为其只能跳过 d.ts 检查 因此你只能关闭 dts.abortOnError 来忽略这些错误。 其他 # 增加额外的编译能力 # Modern.js Module 基于 esbuild 实现 因此如果有特殊需求或者想要增加额外的编译能力 可以通过实现 esbuild 插件来解决。 Modern.js Module 提供了 esbuildOptions 配置允许修改 Modern.js Module 内部的 esbuild 配置 因此可以通过该配置来增加自定义的 esbuild 插件 modern.config.ts import { myEsbuildPlugin } from './myEsbuildPlugin' ; export default defineConfig ( { buildConfig : { esbuildOptions : options => { options . plugins = [ myEsbuildPlugin , ... options . plugins ] ; return options ; } , } , } ) ; 在增加 esbuild 插件时 请注意你需要将插件加在 plugins 数组的头部 因为 Modern.js Module 内部也是通过一个 esbuild 插件介入到整个构建流程中去的 因此需要将自定义插件优先注册。 支持生成 CSS Modules 的 TypeScript 声明文件 # 方案一 typed-css-modules 方案二 postcss-modules-dts modern.config.ts import { defineConfig } from '@modern-js/module-tools' ; export default defineConfig ( async ( ) => { const { dts } = await import ( '@guanghechen/postcss-modules-dts' ) ; return { buildConfig : { style : { modules : { ... dts } , } , } , // 你的自定义配置 } ; } ) ; Edit this page on GitHub 上一页 常见问题 下一页 Storybook 相关问题 目录 产物问题 Class Fields 的初始化处理 babel-plugin-lodash 将引入的 lodash 处理成 undefined 异常类问题 Dynamic require of \\\\\"react\\\\\" is not supported 问题描述 解决办法 参考链接 编译过程中 因为某个组件库的 less 文件报错 \\'Operation on an invalid type\\' Bundle DTS failed defineConfig 函数类型报错 如果没有引用 \\\"...\\\" 则无法命名 \\\"default\\\" 的推断类型 Bundleless DTS failed 其他 增加额外的编译能力 支持生成 CSS Modules 的 TypeScript 声明文件 ","lang":null,"canonicalUrl":"https://modernjs.dev/module-tools/guide/faq/build.html","description":null,"urlTerms":["module","tools","guide","faq","build","html"],"titleTerms":["构","建","相","关","问","题","modern","js","module"]}},{"timestamp":1702266227602,"collection":"favIcons","objectPk":"modernjs.dev","operation":"update","object":{"hostname":"modernjs.dev","favIcon":""}},{"timestamp":1702266229251,"collection":"pages","objectPk":"modernjs.dev/module-tools/guide/faq/build.html","operation":"update","object":{"url":"modernjs.dev/module-tools/guide/faq/build.html","fullUrl":"https://modernjs.dev/module-tools/guide/faq/build.html","domain":"modernjs.dev","hostname":"modernjs.dev","fullTitle":"构建相关问题 - Modern.js Module","text":" Modern.js Module Search Docs K 指南 API 插件 v2.40.0 更新日志 贡献指南 简体中文 English 指南 API 插件 v2.40.0 更新日志 贡献指南 简体中文 English Menu Modern.js Module 介绍 欢迎使用 为什么需要 Modern.js Module 快速开始 基础使用 开始之前 CLI 命令 修改输出产物 使用微生成器 使用 Storybook 测试项目 版本管理与发布 进阶指南 深入理解构建 深入理解 dev 命令 使用 Copy 工具 处理三方依赖 构建 umd 产物 处理静态资源 最佳实践 开发组件 使用 Tailwind CSS 常见问题 构建相关问题 Storybook 相关问题 测试相关问题 构建相关问题 # 产物问题 # Class Fields 的初始化处理 # TypeSript 提供了 useDefineForClassFields 配置用于控制对于 public class fields 的转换处理。 如果有一段代码 class C { foo = 100 ; bar : string ; } 当 useDefineForClassFields 为 false 的时候 则编译后的代码会变为 class C { constructor ( ) { this . foo = 100 ; } } 当 useDefineForClassFields 为 true 的时候 则编译后的代码会变为 class C { constructor ( ) { Object . defineProperty ( this , 'foo' , { enumerable : true , configurable : true , writable : true , value : 100 , } ) ; Object . defineProperty ( this , 'bar' , { enumerable : true , configurable : true , writable : true , value : void 0 , } ) ; } } 同时该配置的默认值会根据 tsconfig.json 的 target 配置而变化 当 target 是 ES2022 或者更高的时候 则 useDefineForClassFields 默认配置为 true 否则就是默认为 false。 关于 TypeScript 这个配置的更多信息 可以参考下面的链接 The useDefineForClassFields Flag and The declare Property Modifier Modern.js Module 目前会根据下面的逻辑进行处理 首先根据当前项目的 tsconfig.json 的 useDefineForClassFields 配置确定在 Modern.js Module 内部如何处理。目前只会读取当前项目路径下的 tsconfig.json 文件的内容 暂时不支持根据 extends 配置来获取最终的 tsconfig 配置。 如果没有检测 tsconfig.json 的 useDefineForClassFields 配置 则会根据 tsconfig.json 的 target 配置来确定默认值。如果 target 大于 ES2022 包含 EsNext 则 useDefineForClassFields默认为 true 否则为 false。 如果没有检测到 tsconfig.json 的 target 则按照 useDefineForClassFields的值 为 true 进行处理。 babel-plugin-lodash 将引入的 lodash 处理成 undefined # 当使用类似下面的方式的时候 会出现这个问题 import * as Lodash from 'lodash' ; export const libs = { _ : Lodash , } ; 目前在 babel-plugin-lodash Github 上的相关 Issue #235 这个问题的解决办法是移除 babel-plugin-lodash 因为此时不需要该插件进行按需引用 使用该插件会产生副作用。 类似的情况在 babel-plugin-import 上也可能会出现。比如有类似如下的代码 import * as Comps from 'components' ; export const libs = { comps : Comps , } ; 此时 babel-plugin-import 也可能会导致 Comps 变为 undefined。因此也需要移除对应的 babel-plugin-import。 异常类问题 # Dynamic require of \\\"react\\\" is not supported # 问题描述 # 当构建的产物配置中产物格式为 ES modules 的时候 export default defineConfig ( { buildConfig : { format : 'esm' , } , } ) ; 如果导入了的第三方 npm 包的 cjs 产物 那么生成的产物可能会在 webpack 下有可能无法正常运行。 解决办法 # 首先需要找到是哪个第三方包引起的问题。例如报错信息中指向了 react 这个包 那么就要寻找在哪个第三方包里存在 require('react') 这样的代码。比如 react-draggable 这个包仅包含 cjs 产物 那么问题定位到 react-draggable 这个包。 然后我们需要将这个包通过下面的配置进行排除 即不打包存在问题的第三方包。 export default defineConfig ( { buildConfig : { externals : [ 'react-draggable' ] , } , } ) ; 参考链接 # When using esbuild with external react I get Dynamic require of \"react\" is not supported 编译过程中 因为某个组件库的 less 文件报错 'Operation on an invalid type' # 可能是因为该组件库依赖的 Less 版本是 v3 而 Modern.js Module 默认是 v4。v3 与 v4 在 math 配置上存在有 Break Change 可以查看这个 链接 了解详情。 因此 如果是在源码中使用了类似这样的组件库 在构建配置中使用了 buildPreset 的情况下 按照下面进行修改 module . exports = { buildPreset ( { extendPreset } ) { return extendPreset ( 'your-build-preset' , { style : { less : { lessOptions : { math : 'always' , } , } , } , } ) ; } , } ; 或者使用了自定义的 buildConfig 的情况下 按照下面进行修改 module . exports = { buildConfig : { style : { less : { lessOptions : { math : 'always' , } , } , } , } , } ; 如果是在 Storybook 中使用了类似这样的组件 则需要修改 Storybook 的调试配置 .storybook/main.ts module . exports = { framework : { options : { builderConfig : { tools : { webpackChain ( chain , { CHAIN_ID } ) { chain . module . rule ( CHAIN_ID . RULE . LESS ) . use ( CHAIN_ID . USE . LESS ) . tap ( options => { options . lessOptions = { ... options . lessOptions , math : 'always' , } ; return options ; } ) ; } , } } } } , } ; Bundle DTS failed # 正常情况下 使用 tsc Modern.js Module 不仅支持输出松散的类型文件产物 同时也支持打包类型文件 可以将这些松散的类型文件以及第三方依赖的类型文件打包成一个文件。 不过 打包第三方依赖的类型文件是存在风险的 因为存在第三方依赖的类型文件无法打包的情况。 因此当遇到 Modern.js Module 构建过程中出现 Bundle DTS failed 的错误信息标题的时候 可以观察报错信息是来自某个第三方依赖。尝试设置 dts.respectExternal 为 false 来关闭打包第三方依赖的类型文件的行为。 defineConfig 函数类型报错 如果没有引用 \"...\" 则无法命名 \"default\" 的推断类型 # 检查项目的 tsconfig.json 文件中是否存在 include 配置 如果没有 则尝试增加下面的内容 { \"include\" : [ \"src\" ] } Bundleless DTS failed # 在不打包的场景下 是直接 tsc 生成类型声明文件。通过终端打印的错误信息 你可以找到问题文件。对于源码文件 推荐将类型问题进行修复 这能够更好地使你的包得到复用。但如果遇到三方包的类型检查问题 开启 skipLibCheck 来跳过三方包的 d.ts 检查。 如果三方包直接导出 ts 文件 skipLibCheck 将会失效 因为其只能跳过 d.ts 检查 因此你只能关闭 dts.abortOnError 来忽略这些错误。 其他 # 增加额外的编译能力 # Modern.js Module 基于 esbuild 实现 因此如果有特殊需求或者想要增加额外的编译能力 可以通过实现 esbuild 插件来解决。 Modern.js Module 提供了 esbuildOptions 配置允许修改 Modern.js Module 内部的 esbuild 配置 因此可以通过该配置来增加自定义的 esbuild 插件 modern.config.ts import { myEsbuildPlugin } from './myEsbuildPlugin' ; export default defineConfig ( { buildConfig : { esbuildOptions : options => { options . plugins = [ myEsbuildPlugin , ... options . plugins ] ; return options ; } , } , } ) ; 在增加 esbuild 插件时 请注意你需要将插件加在 plugins 数组的头部 因为 Modern.js Module 内部也是通过一个 esbuild 插件介入到整个构建流程中去的 因此需要将自定义插件优先注册。 支持生成 CSS Modules 的 TypeScript 声明文件 # 方案一 typed-css-modules 方案二 postcss-modules-dts modern.config.ts import { defineConfig } from '@modern-js/module-tools' ; export default defineConfig ( async ( ) => { const { dts } = await import ( '@guanghechen/postcss-modules-dts' ) ; return { buildConfig : { style : { modules : { ... dts } , } , } , // 你的自定义配置 } ; } ) ; Edit this page on GitHub 上一页 常见问题 下一页 Storybook 相关问题 目录 产物问题 Class Fields 的初始化处理 babel-plugin-lodash 将引入的 lodash 处理成 undefined 异常类问题 Dynamic require of \\\\\"react\\\\\" is not supported 问题描述 解决办法 参考链接 编译过程中 因为某个组件库的 less 文件报错 \\'Operation on an invalid type\\' Bundle DTS failed defineConfig 函数类型报错 如果没有引用 \\\"...\\\" 则无法命名 \\\"default\\\" 的推断类型 Bundleless DTS failed 其他 增加额外的编译能力 支持生成 CSS Modules 的 TypeScript 声明文件 ","lang":null,"canonicalUrl":"https://modernjs.dev/module-tools/guide/faq/build.html","description":null,"urlTerms":["module","tools","guide","faq","build","html"],"titleTerms":["构","建","相","关","问","题","modern","js","module"]}},{"timestamp":1702266229271,"collection":"pageListEntries","objectPk":[20201014,"modernjs.dev/module-tools/guide/faq/build.html"],"operation":"update","object":{"listId":20201014,"pageUrl":"modernjs.dev/module-tools/guide/faq/build.html","fullUrl":"https://modernjs.dev/module-tools/guide/faq/build.html","createdAt":"2023-12-08T00:56:28.520Z"}},{"timestamp":1702266229298,"collection":"visits","objectPk":[1701996988588,"modernjs.dev/module-tools/guide/faq/build.html"],"operation":"update","object":{"url":"modernjs.dev/module-tools/guide/faq/build.html","time":1701996988588,"duration":null,"scrollMaxPx":null,"scrollMaxPerc":null,"scrollPerc":null,"scrollPx":null}},{"timestamp":1702266230061,"collection":"pages","objectPk":"legacy.reactjs.org/docs/legacy-context.html","operation":"update","object":{"url":"legacy.reactjs.org/docs/legacy-context.html","fullUrl":"https://legacy.reactjs.org/docs/legacy-context.html","domain":"reactjs.org","hostname":"legacy.reactjs.org","fullTitle":"Legacy Context – React --- 遗留上下文——React","text":" We want to hear from you! Take our 2021 Community Survey! This site is no longer updated. Go to react.dev React Docs Tutorial Blog Community v18.2.0 Languages GitHub Legacy Context Note: The legacy context API will be removed in a future major version. Use the new context API introduced with version 16.3. The legacy API will continue working for all 16.x releases. How To Use Context 如何使用上下文 This section documents a legacy API. See the new API . 本节记录了旧版 API。请参阅新的 API。 Suppose you have a structure like: 假设您有这样的结构 class Button extends React .Component { render ( ) { return ( <button style = { { background : this .props .color } } > { this .props .children } </button > ) ; } } class Message extends React .Component { render ( ) { return ( <div > { this .props .text } < Button color = { this .props .color } > Delete </ Button > </div > ) ; } } class MessageList extends React .Component { render ( ) { const color = \"purple\" ; const children = this .props .messages . map ( ( message ) => < Message text = {message .text } color = {color } /> ) ; return <div > {children } </div > ; } } In this example, we manually thread through a color prop in order to style the Button and Message components appropriately. Using context, we can pass this through the tree automatically: 在此示例中 我们手动通过 color 属性进行线程化 以便适当地设置 Button 和 Message 组件的样式。使用上下文 我们可以自动将其传递到树中 import PropTypes from 'prop-types' ; class Button extends React .Component { render ( ) { return ( <button style = { { background : this .context .color } } > { this .props .children } </button > ) ; } } Button .contextTypes = { color : PropTypes .string } ; class Message extends React .Component { render ( ) { return ( <div > { this .props .text } < Button > Delete </ Button > </div > ) ; } } class MessageList extends React .Component { getChildContext ( ) { return { color : \"purple\" } ; } render ( ) { const children = this .props .messages . map ( ( message ) => < Message text = {message .text } /> ) ; return <div > {children } </div > ; } } MessageList .childContextTypes = { color : PropTypes .string } ; By adding childContextTypes and getChildContext to MessageList (the context provider), React passes the information down automatically and any component in the subtree (in this case, Button) can access it by defining contextTypes. 通过将 childContextTypes 和 getChildContext 添加到 MessageList 上下文提供者 React 会自动向下传递信息以及子树中的任何组件 在本例中为 Button 可以通过定义 contextTypes 来访问它。 If contextTypes is not defined, then context will be an empty object. 如果 contextTypes 未定义 则 context 将是一个空对象。 Note: 笔记 React.PropTypes has moved into a different package since React v15.5. Please use the prop-types library instead to define contextTypes. 自 React v15.5 以来 React.PropTypes 已移至不同的包中。请使用 prop-types 库来定义 contextTypes 。 We provide a codemod script to automate the conversion. 我们提供了一个 codemod 脚本来自动进行转换。 Parent-Child Coupling 亲子耦合 This section documents a legacy API. See the new API . 本节记录了旧版 API。请参阅新的 API。 Context can also let you build an API where parents and children communicate. For example, one library that works this way is React Router V4 : Context 还可以让您构建一个供父母和孩子进行交流的 API。例如 React Router V4 就是一个以这种方式工作的库 import { BrowserRouter as Router , Route , Link } from 'react-router-dom' ; const BasicExample = ( ) => ( < Router > <div > <ul > <li > < Link to = \"/ \" > Home </ Link > </li > <li > < Link to = \"/about \" > About </ Link > </li > <li > < Link to = \"/topics \" > Topics </ Link > </li > </ul > <hr /> < Route exact path = \"/ \" component = {Home } /> < Route path = \"/about \" component = {About } /> < Route path = \"/topics \" component = {Topics } /> </div > </ Router > ) ; By passing down some information from the Router component, each Link and Route can communicate back to the containing Router. 通过从 Router 组件传递一些信息 每个 Link 和 Route 都可以与包含的 Router 进行通信。 Before you build components with an API similar to this, consider if there are cleaner alternatives. For example, you can pass entire React components as props if you’d like to. 在使用与此类似的 API 构建组件之前 请考虑是否有更简洁的替代方案。例如 如果您愿意 您可以将整个 React 组件作为 props 传递。 Referencing Context in Lifecycle Methods 在生命周期方法中引用上下文 This section documents a legacy API. See the new API . 本节记录了旧版 API。请参阅新的 API。 If contextTypes is defined within a component, the following lifecycle methods will receive an additional parameter, the context object: 如果 contextTypes 是在组件内定义的 则以下生命周期方法将接收一个附加参数 即 context 对象 constructor(props, context) componentWillReceiveProps(nextProps, nextContext) shouldComponentUpdate(nextProps, nextState, nextContext) componentWillUpdate(nextProps, nextState, nextContext) Note: 笔记 As of React 16, componentDidUpdate no longer receives prevContext. 从 React 16 开始 componentDidUpdate 不再接收 prevContext 。 Referencing Context in Function Components 在函数组件中引用上下文 This section documents a legacy API. See the new API . 本节记录了旧版 API。请参阅新的 API。 Function components are also able to reference context if contextTypes is defined as a property of the function. The following code shows a Button component written as a function component. 如果 contextTypes 被定义为函数的属性 函数组件也可以引用 context 。以下代码显示了编写为函数组件的 Button 组件。 import PropTypes from 'prop-types' ; const Button = ( {children } , context ) => <button style = { { background : context .color } } > {children } </button > ; Button .contextTypes = { color : PropTypes .string } ; Updating Context 更新上下文 This section documents a legacy API. See the new API . 本节记录了旧版 API。请参阅新的 API。 Don’t do it. 不要这样做。 React has an API to update context, but it is fundamentally broken and you should not use it. React 有一个 API 来更新上下文 但它从根本上被破坏了 你不应该使用它。 The getChildContext function will be called when the state or props changes. In order to update data in the context, trigger a local state update with this.setState. This will trigger a new context and changes will be received by the children. 当状态或道具发生变化时 getChildContext 函数将被调用。为了更新上下文中的数据 请使用 this.setState 触发本地状态更新。这将触发一个新的环境 并且孩子们将收到变化。 import PropTypes from 'prop-types' ; class MediaQuery extends React .Component { constructor ( props ) { super (props ) ; this .state = { type : 'desktop' } ; } getChildContext ( ) { return { type : this .state .type } ; } componentDidMount ( ) { const checkMediaQuery = ( ) => { const type = window . matchMedia ( \"(min-width: 1025px)\" ) .matches ? 'desktop' : 'mobile' ; if (type !== this .state .type ) { this . setState ( {type } ) ; } } ; window . addEventListener ( 'resize' , checkMediaQuery ) ; checkMediaQuery ( ) ; } render ( ) { return this .props .children ; } } MediaQuery .childContextTypes = { type : PropTypes .string } ; The problem is, if a context value provided by component changes, descendants that use that value won’t update if an intermediate parent returns false from shouldComponentUpdate. This is totally out of control of the components using context, so there’s basically no way to reliably update the context. This blog post has a good explanation of why this is a problem and how you might get around it. 问题是 如果组件提供的上下文值发生更改 并且中间父级从 shouldComponentUpdate 返回 false 则使用该值的后代将不会更新。这完全不受使用上下文的组件的控制 因此基本上没有办法可靠地更新上下文。这篇博文很好地解释了为什么这是一个问题以及如何解决它。 Is this page useful? Edit this page 这个页面有用吗 编辑这个页面 Installation Getting Started Add React to a Website Create a New React App CDN Links Release Channels Main Concepts 1. Hello World 2. Introducing JSX 3. Rendering Elements 4. Components and Props 5. State and Lifecycle 6. Handling Events 7. Conditional Rendering 8. Lists and Keys 9. Forms 10. Lifting State Up 11. Composition vs Inheritance 12. Thinking In React Advanced Guides Accessibility Code-Splitting Context Error Boundaries Forwarding Refs Fragments Higher-Order Components Integrating with Other Libraries JSX In Depth Optimizing Performance Portals Profiler React Without ES6 React Without JSX Reconciliation Refs and the DOM Render Props Static Type Checking Strict Mode Typechecking With PropTypes Uncontrolled Components Web Components API Reference React React.Component ReactDOM ReactDOMClient ReactDOMServer DOM Elements SyntheticEvent Test Utilities Test Renderer JS Environment Requirements Glossary Hooks 1. Introducing Hooks 2. Hooks at a Glance 3. Using the State Hook 4. Using the Effect Hook 5. Rules of Hooks 6. Building Your Own Hooks 7. Hooks API Reference 8. Hooks FAQ Testing Testing Overview Testing Recipes Testing Environments Contributing How to Contribute Codebase Overview Implementation Notes Design Principles FAQ AJAX and APIs Babel, JSX, and Build Steps Passing Functions to Components Component State Styling and CSS File Structure Versioning Policy Virtual DOM and Internals Docs Installation Main Concepts Advanced Guides API Reference Hooks Testing Contributing FAQ Channels GitHub Stack Overflow Discussion Forums Reactiflux Chat DEV Community Facebook Twitter Community Code of Conduct Community Resources More Tutorial Blog Acknowledgements React Native Privacy Terms Copyright © 2023 Meta Platforms, Inc. ","lang":null,"canonicalUrl":"https://legacy.reactjs.org/docs/legacy-context.html","description":null,"urlTerms":["docs","legacy","context","html"],"titleTerms":["legacy","context","react","遗","留","上","下","文"]}},{"timestamp":1702266231597,"collection":"favIcons","objectPk":"legacy.reactjs.org","operation":"update","object":{"hostname":"legacy.reactjs.org","favIcon":""}},{"timestamp":1702266233167,"collection":"pages","objectPk":"legacy.reactjs.org/docs/legacy-context.html","operation":"update","object":{"url":"legacy.reactjs.org/docs/legacy-context.html","fullUrl":"https://legacy.reactjs.org/docs/legacy-context.html","domain":"reactjs.org","hostname":"legacy.reactjs.org","fullTitle":"Legacy Context – React --- 遗留上下文——React","text":" We want to hear from you! Take our 2021 Community Survey! This site is no longer updated. Go to react.dev React Docs Tutorial Blog Community v18.2.0 Languages GitHub Legacy Context Note: The legacy context API will be removed in a future major version. Use the new context API introduced with version 16.3. The legacy API will continue working for all 16.x releases. How To Use Context 如何使用上下文 This section documents a legacy API. See the new API . 本节记录了旧版 API。请参阅新的 API。 Suppose you have a structure like: 假设您有这样的结构 class Button extends React .Component { render ( ) { return ( <button style = { { background : this .props .color } } > { this .props .children } </button > ) ; } } class Message extends React .Component { render ( ) { return ( <div > { this .props .text } < Button color = { this .props .color } > Delete </ Button > </div > ) ; } } class MessageList extends React .Component { render ( ) { const color = \"purple\" ; const children = this .props .messages . map ( ( message ) => < Message text = {message .text } color = {color } /> ) ; return <div > {children } </div > ; } } In this example, we manually thread through a color prop in order to style the Button and Message components appropriately. Using context, we can pass this through the tree automatically: 在此示例中 我们手动通过 color 属性进行线程化 以便适当地设置 Button 和 Message 组件的样式。使用上下文 我们可以自动将其传递到树中 import PropTypes from 'prop-types' ; class Button extends React .Component { render ( ) { return ( <button style = { { background : this .context .color } } > { this .props .children } </button > ) ; } } Button .contextTypes = { color : PropTypes .string } ; class Message extends React .Component { render ( ) { return ( <div > { this .props .text } < Button > Delete </ Button > </div > ) ; } } class MessageList extends React .Component { getChildContext ( ) { return { color : \"purple\" } ; } render ( ) { const children = this .props .messages . map ( ( message ) => < Message text = {message .text } /> ) ; return <div > {children } </div > ; } } MessageList .childContextTypes = { color : PropTypes .string } ; By adding childContextTypes and getChildContext to MessageList (the context provider), React passes the information down automatically and any component in the subtree (in this case, Button) can access it by defining contextTypes. 通过将 childContextTypes 和 getChildContext 添加到 MessageList 上下文提供者 React 会自动向下传递信息以及子树中的任何组件 在本例中为 Button 可以通过定义 contextTypes 来访问它。 If contextTypes is not defined, then context will be an empty object. 如果 contextTypes 未定义 则 context 将是一个空对象。 Note: 笔记 React.PropTypes has moved into a different package since React v15.5. Please use the prop-types library instead to define contextTypes. 自 React v15.5 以来 React.PropTypes 已移至不同的包中。请使用 prop-types 库来定义 contextTypes 。 We provide a codemod script to automate the conversion. 我们提供了一个 codemod 脚本来自动进行转换。 Parent-Child Coupling 亲子耦合 This section documents a legacy API. See the new API . 本节记录了旧版 API。请参阅新的 API。 Context can also let you build an API where parents and children communicate. For example, one library that works this way is React Router V4 : Context 还可以让您构建一个供父母和孩子进行交流的 API。例如 React Router V4 就是一个以这种方式工作的库 import { BrowserRouter as Router , Route , Link } from 'react-router-dom' ; const BasicExample = ( ) => ( < Router > <div > <ul > <li > < Link to = \"/ \" > Home </ Link > </li > <li > < Link to = \"/about \" > About </ Link > </li > <li > < Link to = \"/topics \" > Topics </ Link > </li > </ul > <hr /> < Route exact path = \"/ \" component = {Home } /> < Route path = \"/about \" component = {About } /> < Route path = \"/topics \" component = {Topics } /> </div > </ Router > ) ; By passing down some information from the Router component, each Link and Route can communicate back to the containing Router. 通过从 Router 组件传递一些信息 每个 Link 和 Route 都可以与包含的 Router 进行通信。 Before you build components with an API similar to this, consider if there are cleaner alternatives. For example, you can pass entire React components as props if you’d like to. 在使用与此类似的 API 构建组件之前 请考虑是否有更简洁的替代方案。例如 如果您愿意 您可以将整个 React 组件作为 props 传递。 Referencing Context in Lifecycle Methods 在生命周期方法中引用上下文 This section documents a legacy API. See the new API . 本节记录了旧版 API。请参阅新的 API。 If contextTypes is defined within a component, the following lifecycle methods will receive an additional parameter, the context object: 如果 contextTypes 是在组件内定义的 则以下生命周期方法将接收一个附加参数 即 context 对象 constructor(props, context) componentWillReceiveProps(nextProps, nextContext) shouldComponentUpdate(nextProps, nextState, nextContext) componentWillUpdate(nextProps, nextState, nextContext) Note: 笔记 As of React 16, componentDidUpdate no longer receives prevContext. 从 React 16 开始 componentDidUpdate 不再接收 prevContext 。 Referencing Context in Function Components 在函数组件中引用上下文 This section documents a legacy API. See the new API . 本节记录了旧版 API。请参阅新的 API。 Function components are also able to reference context if contextTypes is defined as a property of the function. The following code shows a Button component written as a function component. 如果 contextTypes 被定义为函数的属性 函数组件也可以引用 context 。以下代码显示了编写为函数组件的 Button 组件。 import PropTypes from 'prop-types' ; const Button = ( {children } , context ) => <button style = { { background : context .color } } > {children } </button > ; Button .contextTypes = { color : PropTypes .string } ; Updating Context 更新上下文 This section documents a legacy API. See the new API . 本节记录了旧版 API。请参阅新的 API。 Don’t do it. 不要这样做。 React has an API to update context, but it is fundamentally broken and you should not use it. React 有一个 API 来更新上下文 但它从根本上被破坏了 你不应该使用它。 The getChildContext function will be called when the state or props changes. In order to update data in the context, trigger a local state update with this.setState. This will trigger a new context and changes will be received by the children. 当状态或道具发生变化时 getChildContext 函数将被调用。为了更新上下文中的数据 请使用 this.setState 触发本地状态更新。这将触发一个新的环境 并且孩子们将收到变化。 import PropTypes from 'prop-types' ; class MediaQuery extends React .Component { constructor ( props ) { super (props ) ; this .state = { type : 'desktop' } ; } getChildContext ( ) { return { type : this .state .type } ; } componentDidMount ( ) { const checkMediaQuery = ( ) => { const type = window . matchMedia ( \"(min-width: 1025px)\" ) .matches ? 'desktop' : 'mobile' ; if (type !== this .state .type ) { this . setState ( {type } ) ; } } ; window . addEventListener ( 'resize' , checkMediaQuery ) ; checkMediaQuery ( ) ; } render ( ) { return this .props .children ; } } MediaQuery .childContextTypes = { type : PropTypes .string } ; The problem is, if a context value provided by component changes, descendants that use that value won’t update if an intermediate parent returns false from shouldComponentUpdate. This is totally out of control of the components using context, so there’s basically no way to reliably update the context. This blog post has a good explanation of why this is a problem and how you might get around it. 问题是 如果组件提供的上下文值发生更改 并且中间父级从 shouldComponentUpdate 返回 false 则使用该值的后代将不会更新。这完全不受使用上下文的组件的控制 因此基本上没有办法可靠地更新上下文。这篇博文很好地解释了为什么这是一个问题以及如何解决它。 Is this page useful? Edit this page 这个页面有用吗 编辑这个页面 Installation Getting Started Add React to a Website Create a New React App CDN Links Release Channels Main Concepts 1. Hello World 2. Introducing JSX 3. Rendering Elements 4. Components and Props 5. State and Lifecycle 6. Handling Events 7. Conditional Rendering 8. Lists and Keys 9. Forms 10. Lifting State Up 11. Composition vs Inheritance 12. Thinking In React Advanced Guides Accessibility Code-Splitting Context Error Boundaries Forwarding Refs Fragments Higher-Order Components Integrating with Other Libraries JSX In Depth Optimizing Performance Portals Profiler React Without ES6 React Without JSX Reconciliation Refs and the DOM Render Props Static Type Checking Strict Mode Typechecking With PropTypes Uncontrolled Components Web Components API Reference React React.Component ReactDOM ReactDOMClient ReactDOMServer DOM Elements SyntheticEvent Test Utilities Test Renderer JS Environment Requirements Glossary Hooks 1. Introducing Hooks 2. Hooks at a Glance 3. Using the State Hook 4. Using the Effect Hook 5. Rules of Hooks 6. Building Your Own Hooks 7. Hooks API Reference 8. Hooks FAQ Testing Testing Overview Testing Recipes Testing Environments Contributing How to Contribute Codebase Overview Implementation Notes Design Principles FAQ AJAX and APIs Babel, JSX, and Build Steps Passing Functions to Components Component State Styling and CSS File Structure Versioning Policy Virtual DOM and Internals Docs Installation Main Concepts Advanced Guides API Reference Hooks Testing Contributing FAQ Channels GitHub Stack Overflow Discussion Forums Reactiflux Chat DEV Community Facebook Twitter Community Code of Conduct Community Resources More Tutorial Blog Acknowledgements React Native Privacy Terms Copyright © 2023 Meta Platforms, Inc. ","lang":null,"canonicalUrl":"https://legacy.reactjs.org/docs/legacy-context.html","description":null,"urlTerms":["docs","legacy","context","html"],"titleTerms":["legacy","context","react","遗","留","上","下","文"]}},{"timestamp":1702266233184,"collection":"pageListEntries","objectPk":[20201014,"legacy.reactjs.org/docs/legacy-context.html"],"operation":"update","object":{"listId":20201014,"pageUrl":"legacy.reactjs.org/docs/legacy-context.html","fullUrl":"https://legacy.reactjs.org/docs/legacy-context.html","createdAt":"2023-12-08T02:43:46.594Z"}},{"timestamp":1702266233707,"collection":"visits","objectPk":[1702003426623,"legacy.reactjs.org/docs/legacy-context.html"],"operation":"update","object":{"url":"legacy.reactjs.org/docs/legacy-context.html","time":1702003426623,"duration":null,"scrollMaxPx":null,"scrollMaxPerc":null,"scrollPerc":null,"scrollPx":null}},{"timestamp":1702266233717,"collection":"settings","objectPk":"openAI.apiKey","operation":"update","object":{"key":"openAI.apiKey","value":""}},{"timestamp":1702266233729,"collection":"pages","objectPk":"nextui.org/docs/guide/routing","operation":"update","object":{"url":"nextui.org/docs/guide/routing","fullUrl":"https://nextui.org/docs/guide/routing","domain":"nextui.org","hostname":"nextui.org","fullTitle":"Installation | NextUI - Beautiful, fast and modern React UI Library --- 安装| NextUI - 美丽、快速且现代的 React UI 库","text":" v2.2.9 Docs Components Blog Figma Introducing v2.2.0 open navigation menu Quick Search... K Sponsor open navigation menu Guide 指导 Introduction 介绍 Installation 安装 Design Principles 设计原则 Routing 路由 New Upgrade to v2 升级到v2 Frameworks 构架 Next.js Vite 维特 Remix 混音 Astro 阿斯特罗 Customization 定制化 Theme 主题 Layout 布局 Colors 颜色 Customize theme 自定义主题 Create theme 创建主题 Dark mode 深色模式 Override styles 覆盖样式 Custom variants 定制变体 Components 成分 Avatar 阿凡达 Accordion 手风琴 Autocomplete 自动完成 New Badge 徽章 Button 按钮 Breadcrumbs 面包屑 New Card 卡片 Checkbox 复选框 Checkbox Group 复选框组 Chip 芯片 Circular Progress 循环进展 Code 代码 Divider 分频器 Dropdown 落下 Updated 更新 Image 图像 Input 输入 Kbd Link 关联 Updated 更新 Listbox 列表框 Updated 更新 Modal 莫代尔 Navbar 导航栏 Pagination 分页 Popover 弹出窗口 Progress 进步 Radio Group 无线电集团 Select 选择 Skeleton 骨骼 Snippet 片段 Scroll Shadow 卷轴阴影 Spacer 垫片 Spinner 旋转器 Switch 转变 Slider 滑块 New Table 桌子 Tabs 选项卡 Updated 更新 Textarea 文本区 Updated 更新 Tooltip 工具提示 User 用户 Routing 路由 NextUI Components such as Tabs , Listbox , Dropdown and many others offer the flexibility to be rendered as HTML links. Explore this page to learn how to integrate them with client side routing. NextUI 组件 例如选项卡、列表框、下拉菜单和许多其他组件 提供了呈现为 HTML 链接的灵活性。浏览此页面以了解如何将它们与客户端路由集成。 Introduction 介绍 By default, links perform native browser navigation when they are interacted with. However, many apps and frameworks use client side routers to avoid a full page reload when navigating between pages. The NextUIProvider component configures all NextUI components within it to navigate using the client side router you provide. 默认情况下 链接在交互时执行本机浏览器导航。但是 许多应用程序和框架使用客户端路由器来避免在页面之间导航时重新加载整页。 NextUIProvider 组件配置其中的所有 NextUI 组件 以使用您提供的客户端路由器进行导航。 Set this up once in the root of your app, and any NextUI component with the href prop will automatically navigate using your router. 在应用程序的根目录中设置一次 任何带有 href 属性的 NextUI 组件都将使用您的路由器自动导航。 NextUIProvider Setup NextUIProvider 设置 The NextUIProvider accepts a prop called navigate. This should be set to a function received from your router for performing a client side navigation programmatically. The following example shows the general pattern. Framework-specific examples are shown below. NextUIProvider 接受一个名为 navigate 的属性。这应该设置为从路由器接收的函数 用于以编程方式执行客户端导航。以下示例显示了一般模式。下面显示了特定于框架的示例。 import * as React from \"react\" ; // 1. import `NextUIProvider` component import { NextUIProvider } from \"@nextui-org/react\" ; function App ( ) { const navigate = useNavigateFromYourRouter ( ) ; // 2. Add the `navigate` function to the `NextUIProvider` return ( < NextUIProvider navigate = { navigate } > < YourApplication /> </ NextUIProvider > ) ; } Next.js App Router 应用路由器 Go to your app/providers.tsx or app/providers.jsx (create it if it doesn't exist) and add the useRouter hook from next/navigation, it returns a router object that can be used to perform navigation. 转到您的 app/providers.tsx 或 app/providers.jsx 如果不存在则创建它 并从 next/navigation 添加 useRouter 钩子 它返回可用于执行导航的路由器对象。 Add the 添加 useRouter // app/providers.tsx 'use client' import { NextUIProvider } from '@nextui-org/react' ; import { useRouter } from 'next/navigation' export function Providers ( { children } : { children : React . ReactNode } ) { const router = useRouter ( ) ; return ( < NextUIProvider navigate = { router . push } > { children } </ NextUIProvider > ) } Add Provider to Root 将提供者添加到根目录 Now, Go to your root layout page and wrap it with the NextUIProvider: 现在 转到 root 布局页面并用 NextUIProvider 包裹它 // app/layout.tsx import { Providers } from \"./providers\" ; export default function RootLayout ( { children } : { children : React . ReactNode } ) { return ( < html lang = \" en \" className = ' dark ' > < body > < Providers > { children } </ Providers > </ body > </ html > ) ; } Note: Skip this step if you already set up the NextUIProvider in your app. 注意 如果您已在应用中设置 NextUIProvider 请跳过此步骤。 Pages Router 页面路由器 Go to pages /_app.js or pages/_app.tsx (create it if it doesn't exist) and add the useRouter hook from next/router, it returns a router object that can be used to perform navigation. 转到页面 /_app.js 或 pages/_app.tsx 如果不存在则创建它 并从 next/router 添加 useRouter 钩子 它返回可用于执行导航的路由器对象。 // pages/_app.tsx import type { AppProps } from 'next/app' ; import { NextUIProvider } from '@nextui-org/react' ; import { useRouter } from 'next/router' ; function MyApp ( { Component , pageProps } : AppProps ) { const router = useRouter ( ) ; return ( < NextUIProvider navigate = { router . push } > < Component { ... pageProps } /> </ NextUIProvider > ) } export default MyApp ; React Router 反应路由器 The useNavigate hook from react-router-dom returns a navigate function that can be used to perform navigation. react-router-dom 中的 useNavigate 挂钩返回可用于执行导航的 navigate 函数。 Go to the App file commonly called App.jsx or App.tsx, add the useNavigate hook and pass the navigate function to the NextUIProvider: 转到通常称为 App.jsx 或 App.tsx 的 App 文件 添加 useNavigate 挂钩并传递 navigate 函数到 NextUIProvider // App.tsx or App.jsx import { BrowserRouter , useNavigate } from 'react-router-dom' ; import { NextUIProvider } from '@nextui-org/react' ; function App ( ) { const navigate = useNavigate ( ) ; return ( < NextUIProvider navigate = { navigate } > { /* Your app here... */ } < Routes > < Route path = \" / \" element = { < HomePage /> } /> { /* ... */ } </ Routes > </ NextUIProvider > ) ; } // main.tsx or main.jsx ReactDOM . createRoot ( document . getElementById ( 'root' ) ) . render ( < React.StrictMode > < BrowserRouter > < App /> </ BrowserRouter > </ React.StrictMode > , ) Ensure that the component that calls useNavigate and renders NextUIProvider is inside the router component (e.g. BrowserRouter) so that it has access to React Router's internal context. The React Router <Routes> element should also be defined inside NextUIProvider so that links inside the rendered routes have access to the router. 确保调用 useNavigate 并渲染 NextUIProvider 的组件位于路由器组件内部 例如 BrowserRouter 以便它可以访问 React Router 的内部上下文。 React Router <Routes> 元素也应该在 NextUIProvider 内部定义 以便渲染路由内的链接可以访问路由器。 Remix 混音 Remix uses React Router under the hood, so the same useNavigate hook described above also works in Remix apps. NextUIProvider should be rendered at the root of each page that includes NextUI components, or in app/root.tsx to add it to all pages. See the Remix docs for more details. Remix 在底层使用 React Router 因此上面描述的相同 useNavigate 钩子也适用于 Remix 应用程序。 NextUIProvider 应呈现在包含 NextUI 组件的每个页面的 root 处 或者呈现在 app/root.tsx 中以将其添加到所有页面。有关更多详细信息 请参阅 Remix 文档。 // app/root.tsx import { useNavigate , Outlet } from '@remix-run/react' ; import { NextUIProvider } from '@nextui-org/react' ; export default function App ( ) { const navigate = useNavigate ( ) ; return ( < html lang = \" en \" > < head > { /* ... */ } </ head > < body > < NextUIProvider navigate = { navigate } > < Outlet /> </ NextUIProvider > { /* ... */ } </ body > </ html > ) ; } Usage examples 使用示例 Now that you have set up the NextUIProvider in your app, you can use the href prop in the Tabs, Listbox and Dropdown items to navigate between pages. 现在您已经在应用中设置了 NextUIProvider 您可以在 Tabs 、 Listbox 和 Dropdown 项目在页面之间导航。 The Link component will also use the navigate function from the NextUIProvider to navigate between pages. Link 组件还将使用 NextUIProvider 中的 navigate 函数在页面之间导航。 import { Tabs , Tab , Listbox , ListboxItem , Dropdown , DropdownTrigger , DropdownMenu , DropdownItem , Button , Link , } from \"@nextui-org/react\" ; function App ( ) { return ( < > < Tabs aria-label = \" Navigation \" > < Tab key = \" home \" href = \" /home \" > Home </ Tab > < Tab key = \" about \" href = \" /about \" > About </ Tab > </ Tabs > < Listbox aria-label = \" Navigation \" > < ListboxItem key = \" home \" href = \" /home \" > Home </ ListboxItem > < ListboxItem key = \" about \" href = \" /about \" > About </ ListboxItem > </ Listbox > < Dropdown > < DropdownTrigger > < Button > Open </ Button > </ DropdownTrigger > < DropdownMenu aria-label = \" Navigation \" > < DropdownItem key = \" home \" href = \" /home \" > Home </ DropdownItem > < DropdownItem key = \" about \" href = \" /about \" > About </ DropdownItem > </ DropdownMenu > </ Dropdown > < Link href = \" /home \" > Home </ Link > < Link href = \" /about \" > About </ Link > </ > ) ; } Design Principles 设计原则 Upgrade to v2 升级到v2 Edit this page on GitHub On this page 在本页 Introduction 介绍 NextUIProvider Setup NextUIProvider 设置 Next.js App Router 应用路由器 Add the `useRouter` 添加`useRouter` Add Provider to Root 将提供者添加到根目录 Pages Router 页面路由器 React Router 反应路由器 Remix 混音 Usage examples 使用示例 Back to top 回到顶部 © 2023 NextUI Inc. © 2023 NextUI Inc. 版权所有 Deployed on 部署于 ","lang":null,"canonicalUrl":"https://nextui.org/docs/guide/routing","description":null,"urlTerms":["docs","guide","routing"],"titleTerms":["installation","nextui","beautiful","fast","and","modern","react","ui","library","安","装","美","丽","、","快","速","且","现","代","的","库"]}},{"timestamp":1702266234984,"collection":"favIcons","objectPk":"nextui.org","operation":"update","object":{"hostname":"nextui.org","favIcon":""}},{"timestamp":1702266236566,"collection":"pages","objectPk":"nextui.org/docs/guide/routing","operation":"update","object":{"url":"nextui.org/docs/guide/routing","fullUrl":"https://nextui.org/docs/guide/routing","domain":"nextui.org","hostname":"nextui.org","fullTitle":"Installation | NextUI - Beautiful, fast and modern React UI Library --- 安装| NextUI - 美丽、快速且现代的 React UI 库","text":" v2.2.9 Docs Components Blog Figma Introducing v2.2.0 open navigation menu Quick Search... K Sponsor open navigation menu Guide 指导 Introduction 介绍 Installation 安装 Design Principles 设计原则 Routing 路由 New Upgrade to v2 升级到v2 Frameworks 构架 Next.js Vite 维特 Remix 混音 Astro 阿斯特罗 Customization 定制化 Theme 主题 Layout 布局 Colors 颜色 Customize theme 自定义主题 Create theme 创建主题 Dark mode 深色模式 Override styles 覆盖样式 Custom variants 定制变体 Components 成分 Avatar 阿凡达 Accordion 手风琴 Autocomplete 自动完成 New Badge 徽章 Button 按钮 Breadcrumbs 面包屑 New Card 卡片 Checkbox 复选框 Checkbox Group 复选框组 Chip 芯片 Circular Progress 循环进展 Code 代码 Divider 分频器 Dropdown 落下 Updated 更新 Image 图像 Input 输入 Kbd Link 关联 Updated 更新 Listbox 列表框 Updated 更新 Modal 莫代尔 Navbar 导航栏 Pagination 分页 Popover 弹出窗口 Progress 进步 Radio Group 无线电集团 Select 选择 Skeleton 骨骼 Snippet 片段 Scroll Shadow 卷轴阴影 Spacer 垫片 Spinner 旋转器 Switch 转变 Slider 滑块 New Table 桌子 Tabs 选项卡 Updated 更新 Textarea 文本区 Updated 更新 Tooltip 工具提示 User 用户 Routing 路由 NextUI Components such as Tabs , Listbox , Dropdown and many others offer the flexibility to be rendered as HTML links. Explore this page to learn how to integrate them with client side routing. NextUI 组件 例如选项卡、列表框、下拉菜单和许多其他组件 提供了呈现为 HTML 链接的灵活性。浏览此页面以了解如何将它们与客户端路由集成。 Introduction 介绍 By default, links perform native browser navigation when they are interacted with. However, many apps and frameworks use client side routers to avoid a full page reload when navigating between pages. The NextUIProvider component configures all NextUI components within it to navigate using the client side router you provide. 默认情况下 链接在交互时执行本机浏览器导航。但是 许多应用程序和框架使用客户端路由器来避免在页面之间导航时重新加载整页。 NextUIProvider 组件配置其中的所有 NextUI 组件 以使用您提供的客户端路由器进行导航。 Set this up once in the root of your app, and any NextUI component with the href prop will automatically navigate using your router. 在应用程序的根目录中设置一次 任何带有 href 属性的 NextUI 组件都将使用您的路由器自动导航。 NextUIProvider Setup NextUIProvider 设置 The NextUIProvider accepts a prop called navigate. This should be set to a function received from your router for performing a client side navigation programmatically. The following example shows the general pattern. Framework-specific examples are shown below. NextUIProvider 接受一个名为 navigate 的属性。这应该设置为从路由器接收的函数 用于以编程方式执行客户端导航。以下示例显示了一般模式。下面显示了特定于框架的示例。 import * as React from \"react\" ; // 1. import `NextUIProvider` component import { NextUIProvider } from \"@nextui-org/react\" ; function App ( ) { const navigate = useNavigateFromYourRouter ( ) ; // 2. Add the `navigate` function to the `NextUIProvider` return ( < NextUIProvider navigate = { navigate } > < YourApplication /> </ NextUIProvider > ) ; } Next.js App Router 应用路由器 Go to your app/providers.tsx or app/providers.jsx (create it if it doesn't exist) and add the useRouter hook from next/navigation, it returns a router object that can be used to perform navigation. 转到您的 app/providers.tsx 或 app/providers.jsx 如果不存在则创建它 并从 next/navigation 添加 useRouter 钩子 它返回可用于执行导航的路由器对象。 Add the 添加 useRouter // app/providers.tsx 'use client' import { NextUIProvider } from '@nextui-org/react' ; import { useRouter } from 'next/navigation' export function Providers ( { children } : { children : React . ReactNode } ) { const router = useRouter ( ) ; return ( < NextUIProvider navigate = { router . push } > { children } </ NextUIProvider > ) } Add Provider to Root 将提供者添加到根目录 Now, Go to your root layout page and wrap it with the NextUIProvider: 现在 转到 root 布局页面并用 NextUIProvider 包裹它 // app/layout.tsx import { Providers } from \"./providers\" ; export default function RootLayout ( { children } : { children : React . ReactNode } ) { return ( < html lang = \" en \" className = ' dark ' > < body > < Providers > { children } </ Providers > </ body > </ html > ) ; } Note: Skip this step if you already set up the NextUIProvider in your app. 注意 如果您已在应用中设置 NextUIProvider 请跳过此步骤。 Pages Router 页面路由器 Go to pages /_app.js or pages/_app.tsx (create it if it doesn't exist) and add the useRouter hook from next/router, it returns a router object that can be used to perform navigation. 转到页面 /_app.js 或 pages/_app.tsx 如果不存在则创建它 并从 next/router 添加 useRouter 钩子 它返回可用于执行导航的路由器对象。 // pages/_app.tsx import type { AppProps } from 'next/app' ; import { NextUIProvider } from '@nextui-org/react' ; import { useRouter } from 'next/router' ; function MyApp ( { Component , pageProps } : AppProps ) { const router = useRouter ( ) ; return ( < NextUIProvider navigate = { router . push } > < Component { ... pageProps } /> </ NextUIProvider > ) } export default MyApp ; React Router 反应路由器 The useNavigate hook from react-router-dom returns a navigate function that can be used to perform navigation. react-router-dom 中的 useNavigate 挂钩返回可用于执行导航的 navigate 函数。 Go to the App file commonly called App.jsx or App.tsx, add the useNavigate hook and pass the navigate function to the NextUIProvider: 转到通常称为 App.jsx 或 App.tsx 的 App 文件 添加 useNavigate 挂钩并传递 navigate 函数到 NextUIProvider // App.tsx or App.jsx import { BrowserRouter , useNavigate } from 'react-router-dom' ; import { NextUIProvider } from '@nextui-org/react' ; function App ( ) { const navigate = useNavigate ( ) ; return ( < NextUIProvider navigate = { navigate } > { /* Your app here... */ } < Routes > < Route path = \" / \" element = { < HomePage /> } /> { /* ... */ } </ Routes > </ NextUIProvider > ) ; } // main.tsx or main.jsx ReactDOM . createRoot ( document . getElementById ( 'root' ) ) . render ( < React.StrictMode > < BrowserRouter > < App /> </ BrowserRouter > </ React.StrictMode > , ) Ensure that the component that calls useNavigate and renders NextUIProvider is inside the router component (e.g. BrowserRouter) so that it has access to React Router's internal context. The React Router <Routes> element should also be defined inside NextUIProvider so that links inside the rendered routes have access to the router. 确保调用 useNavigate 并渲染 NextUIProvider 的组件位于路由器组件内部 例如 BrowserRouter 以便它可以访问 React Router 的内部上下文。 React Router <Routes> 元素也应该在 NextUIProvider 内部定义 以便渲染路由内的链接可以访问路由器。 Remix 混音 Remix uses React Router under the hood, so the same useNavigate hook described above also works in Remix apps. NextUIProvider should be rendered at the root of each page that includes NextUI components, or in app/root.tsx to add it to all pages. See the Remix docs for more details. Remix 在底层使用 React Router 因此上面描述的相同 useNavigate 钩子也适用于 Remix 应用程序。 NextUIProvider 应呈现在包含 NextUI 组件的每个页面的 root 处 或者呈现在 app/root.tsx 中以将其添加到所有页面。有关更多详细信息 请参阅 Remix 文档。 // app/root.tsx import { useNavigate , Outlet } from '@remix-run/react' ; import { NextUIProvider } from '@nextui-org/react' ; export default function App ( ) { const navigate = useNavigate ( ) ; return ( < html lang = \" en \" > < head > { /* ... */ } </ head > < body > < NextUIProvider navigate = { navigate } > < Outlet /> </ NextUIProvider > { /* ... */ } </ body > </ html > ) ; } Usage examples 使用示例 Now that you have set up the NextUIProvider in your app, you can use the href prop in the Tabs, Listbox and Dropdown items to navigate between pages. 现在您已经在应用中设置了 NextUIProvider 您可以在 Tabs 、 Listbox 和 Dropdown 项目在页面之间导航。 The Link component will also use the navigate function from the NextUIProvider to navigate between pages. Link 组件还将使用 NextUIProvider 中的 navigate 函数在页面之间导航。 import { Tabs , Tab , Listbox , ListboxItem , Dropdown , DropdownTrigger , DropdownMenu , DropdownItem , Button , Link , } from \"@nextui-org/react\" ; function App ( ) { return ( < > < Tabs aria-label = \" Navigation \" > < Tab key = \" home \" href = \" /home \" > Home </ Tab > < Tab key = \" about \" href = \" /about \" > About </ Tab > </ Tabs > < Listbox aria-label = \" Navigation \" > < ListboxItem key = \" home \" href = \" /home \" > Home </ ListboxItem > < ListboxItem key = \" about \" href = \" /about \" > About </ ListboxItem > </ Listbox > < Dropdown > < DropdownTrigger > < Button > Open </ Button > </ DropdownTrigger > < DropdownMenu aria-label = \" Navigation \" > < DropdownItem key = \" home \" href = \" /home \" > Home </ DropdownItem > < DropdownItem key = \" about \" href = \" /about \" > About </ DropdownItem > </ DropdownMenu > </ Dropdown > < Link href = \" /home \" > Home </ Link > < Link href = \" /about \" > About </ Link > </ > ) ; } Design Principles 设计原则 Upgrade to v2 升级到v2 Edit this page on GitHub On this page 在本页 Introduction 介绍 NextUIProvider Setup NextUIProvider 设置 Next.js App Router 应用路由器 Add the `useRouter` 添加`useRouter` Add Provider to Root 将提供者添加到根目录 Pages Router 页面路由器 React Router 反应路由器 Remix 混音 Usage examples 使用示例 Back to top 回到顶部 © 2023 NextUI Inc. © 2023 NextUI Inc. 版权所有 Deployed on 部署于 ","lang":null,"canonicalUrl":"https://nextui.org/docs/guide/routing","description":null,"urlTerms":["docs","guide","routing"],"titleTerms":["installation","nextui","beautiful","fast","and","modern","react","ui","library","安","装","美","丽","、","快","速","且","现","代","的","库"]}},{"timestamp":1702266237432,"collection":"pageListEntries","objectPk":[20201014,"nextui.org/docs/guide/routing"],"operation":"update","object":{"listId":20201014,"pageUrl":"nextui.org/docs/guide/routing","fullUrl":"https://nextui.org/docs/guide/routing","createdAt":"2023-12-11T03:31:57.548Z"}},{"timestamp":1702266237465,"collection":"visits","objectPk":[1702265517583,"nextui.org/docs/guide/routing"],"operation":"update","object":{"url":"nextui.org/docs/guide/routing","time":1702265517583,"duration":null,"scrollMaxPx":null,"scrollMaxPerc":null,"scrollPerc":null,"scrollPx":null}}],"syncKey":"um80k63tuhleqpjnh6s7uv","backupPath":"/Users/admin/Desktop/ObsidianVault/backup"}